
DP_1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007188  08007188  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007188  08007188  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000080  0800720c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800720c  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f93f  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bcf  00000000  00000000  0002fa27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbd  00000000  00000000  00033518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018be0  00000000  00000000  000340d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013163  00000000  00000000  0004ccb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a67  00000000  00000000  0005fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042f8  00000000  00000000  000e7880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000ebb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080069b4 	.word	0x080069b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080069b4 	.word	0x080069b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <dp_sens_init>:
#include "ADP8XX_DP_SENSOR.h"

uint8_t DP_SENSOR_ADDR = 0X25 << 1;
uint32_t i2c_RETRY_TIME = 100;

HAL_StatusTypeDef dp_sens_init(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_IsDeviceReady(&DP_SENS_handletype_def, DP_SENSOR_ADDR, 2,
 8000166:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <dp_sens_init+0x30>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	b299      	uxth	r1, r3
 800016c:	4b09      	ldr	r3, [pc, #36]	; (8000194 <dp_sens_init+0x34>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2202      	movs	r2, #2
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <dp_sens_init+0x38>)
 8000174:	f003 fa86 	bl	8003684 <HAL_I2C_IsDeviceReady>
 8000178:	4603      	mov	r3, r0
 800017a:	71fb      	strb	r3, [r7, #7]
			i2c_RETRY_TIME); // is device avaialble ?
	if (ret != HAL_OK) {
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d001      	beq.n	8000186 <dp_sens_init+0x26>
		return HAL_ERROR;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <dp_sens_init+0x28>
	}
	return HAL_OK;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000000 	.word	0x20000000
 8000194:	20000004 	.word	0x20000004
 8000198:	20000158 	.word	0x20000158

0800019c <READ_PRESSURE>:

uint32_t READ_PRESSURE(void) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af02      	add	r7, sp, #8
	uint8_t COMMAND[2];
	COMMAND[0] = 0X37;
 80001a2:	2337      	movs	r3, #55	; 0x37
 80001a4:	743b      	strb	r3, [r7, #16]
	COMMAND[1] = 0X2D;
 80001a6:	232d      	movs	r3, #45	; 0x2d
 80001a8:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&DP_SENS_handletype_def, DP_SENSOR_ADDR, COMMAND, 2,
 80001aa:	4b16      	ldr	r3, [pc, #88]	; (8000204 <READ_PRESSURE+0x68>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	b299      	uxth	r1, r3
 80001b0:	f107 0210 	add.w	r2, r7, #16
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	2302      	movs	r3, #2
 80001ba:	4813      	ldr	r0, [pc, #76]	; (8000208 <READ_PRESSURE+0x6c>)
 80001bc:	f002 fef8 	bl	8002fb0 <HAL_I2C_Master_Transmit>
			100);
	uint8_t DP_data[9] = { 0 };
 80001c0:	2300      	movs	r3, #0
 80001c2:	607b      	str	r3, [r7, #4]
 80001c4:	f107 0308 	add.w	r3, r7, #8
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Receive(&DP_SENS_handletype_def, DP_SENSOR_ADDR, DP_data, 9,
 80001ce:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <READ_PRESSURE+0x68>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	b299      	uxth	r1, r3
 80001d4:	1d3a      	adds	r2, r7, #4
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2309      	movs	r3, #9
 80001dc:	480a      	ldr	r0, [pc, #40]	; (8000208 <READ_PRESSURE+0x6c>)
 80001de:	f002 ffe5 	bl	80031ac <HAL_I2C_Master_Receive>
			100);
	int32_t PRESSURE = ((int16_t) DP_data[0] << 8 | DP_data[1]) / 60;
 80001e2:	793b      	ldrb	r3, [r7, #4]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	797a      	ldrb	r2, [r7, #5]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	4a08      	ldr	r2, [pc, #32]	; (800020c <READ_PRESSURE+0x70>)
 80001ec:	fb82 1203 	smull	r1, r2, r2, r3
 80001f0:	441a      	add	r2, r3
 80001f2:	1152      	asrs	r2, r2, #5
 80001f4:	17db      	asrs	r3, r3, #31
 80001f6:	1ad3      	subs	r3, r2, r3
 80001f8:	617b      	str	r3, [r7, #20]
	return PRESSURE;
 80001fa:	697b      	ldr	r3, [r7, #20]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3718      	adds	r7, #24
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000000 	.word	0x20000000
 8000208:	20000158 	.word	0x20000158
 800020c:	88888889 	.word	0x88888889

08000210 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <NRF24_DelayMicroSeconds+0x38>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0a      	ldr	r2, [pc, #40]	; (800024c <NRF24_DelayMicroSeconds+0x3c>)
 8000222:	fba2 2303 	umull	r2, r3, r2, r3
 8000226:	0c9a      	lsrs	r2, r3, #18
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	fb02 f303 	mul.w	r3, r2, r3
 800022e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000230:	bf00      	nop
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	1e5a      	subs	r2, r3, #1
 8000236:	60fa      	str	r2, [r7, #12]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1fa      	bne.n	8000232 <NRF24_DelayMicroSeconds+0x22>
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	2000001c 	.word	0x2000001c
 800024c:	165e9f81 	.word	0x165e9f81

08000250 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d008      	beq.n	8000270 <NRF24_csn+0x20>
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <NRF24_csn+0x38>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <NRF24_csn+0x3c>)
 8000264:	8811      	ldrh	r1, [r2, #0]
 8000266:	2201      	movs	r2, #1
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fd2b 	bl	8002cc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800026e:	e007      	b.n	8000280 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <NRF24_csn+0x38>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <NRF24_csn+0x3c>)
 8000276:	8811      	ldrh	r1, [r2, #0]
 8000278:	2200      	movs	r2, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fd22 	bl	8002cc4 <HAL_GPIO_WritePin>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000b0 	.word	0x200000b0
 800028c:	200000b4 	.word	0x200000b4

08000290 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d008      	beq.n	80002b0 <NRF24_ce+0x20>
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <NRF24_ce+0x38>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <NRF24_ce+0x3c>)
 80002a4:	8811      	ldrh	r1, [r2, #0]
 80002a6:	2201      	movs	r2, #1
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fd0b 	bl	8002cc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80002ae:	e007      	b.n	80002c0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <NRF24_ce+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <NRF24_ce+0x3c>)
 80002b6:	8811      	ldrh	r1, [r2, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fd02 	bl	8002cc4 <HAL_GPIO_WritePin>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200000b0 	.word	0x200000b0
 80002cc:	200000b6 	.word	0x200000b6

080002d0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffb8 	bl	8000250 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 031f 	and.w	r3, r3, #31
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002ea:	f107 010c 	add.w	r1, r7, #12
 80002ee:	2364      	movs	r3, #100	; 0x64
 80002f0:	2201      	movs	r2, #1
 80002f2:	480a      	ldr	r0, [pc, #40]	; (800031c <NRF24_read_register+0x4c>)
 80002f4:	f004 fb0e 	bl	8004914 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	1c59      	adds	r1, r3, #1
 80002fe:	2364      	movs	r3, #100	; 0x64
 8000300:	2201      	movs	r2, #1
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <NRF24_read_register+0x4c>)
 8000304:	f004 fc49 	bl	8004b9a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000308:	7b7b      	ldrb	r3, [r7, #13]
 800030a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f7ff ff9f 	bl	8000250 <NRF24_csn>
	return retData;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000b8 	.word	0x200000b8

08000320 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000330:	2000      	movs	r0, #0
 8000332:	f7ff ff8d 	bl	8000250 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f003 031f 	and.w	r3, r3, #31
 800033c:	b2db      	uxtb	r3, r3
 800033e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000340:	f107 010c 	add.w	r1, r7, #12
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	2201      	movs	r2, #1
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <NRF24_read_registerN+0x4c>)
 800034a:	f004 fae3 	bl	8004914 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	b29a      	uxth	r2, r3
 8000352:	2364      	movs	r3, #100	; 0x64
 8000354:	6839      	ldr	r1, [r7, #0]
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <NRF24_read_registerN+0x4c>)
 8000358:	f004 fc1f 	bl	8004b9a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ff77 	bl	8000250 <NRF24_csn>
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000b8 	.word	0x200000b8

08000370 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	460a      	mov	r2, r1
 800037a:	71fb      	strb	r3, [r7, #7]
 800037c:	4613      	mov	r3, r2
 800037e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff ff65 	bl	8000250 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000394:	f107 010c 	add.w	r1, r7, #12
 8000398:	2364      	movs	r3, #100	; 0x64
 800039a:	2202      	movs	r2, #2
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <NRF24_write_register+0x40>)
 800039e:	f004 fab9 	bl	8004914 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff54 	bl	8000250 <NRF24_csn>
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000b8 	.word	0x200000b8

080003b4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	6039      	str	r1, [r7, #0]
 80003be:	71fb      	strb	r3, [r7, #7]
 80003c0:	4613      	mov	r3, r2
 80003c2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff ff43 	bl	8000250 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80003d4:	f107 010c 	add.w	r1, r7, #12
 80003d8:	2364      	movs	r3, #100	; 0x64
 80003da:	2201      	movs	r2, #1
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <NRF24_write_registerN+0x4c>)
 80003de:	f004 fa99 	bl	8004914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	2364      	movs	r3, #100	; 0x64
 80003e8:	6839      	ldr	r1, [r7, #0]
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <NRF24_write_registerN+0x4c>)
 80003ec:	f004 fa92 	bl	8004914 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ff2d 	bl	8000250 <NRF24_csn>
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000b8 	.word	0x200000b8

08000404 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ff1d 	bl	8000250 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000416:	23a0      	movs	r3, #160	; 0xa0
 8000418:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800041a:	f107 010f 	add.w	r1, r7, #15
 800041e:	2364      	movs	r3, #100	; 0x64
 8000420:	2201      	movs	r2, #1
 8000422:	4808      	ldr	r0, [pc, #32]	; (8000444 <NRF24_write_payload+0x40>)
 8000424:	f004 fa76 	bl	8004914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	b29a      	uxth	r2, r3
 800042c:	2364      	movs	r3, #100	; 0x64
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	4804      	ldr	r0, [pc, #16]	; (8000444 <NRF24_write_payload+0x40>)
 8000432:	f004 fa6f 	bl	8004914 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f7ff ff0a 	bl	8000250 <NRF24_csn>
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000b8 	.word	0x200000b8

08000448 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000454:	f000 fa84 	bl	8000960 <NRF24_getPayloadSize>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	4293      	cmp	r3, r2
 8000460:	d303      	bcc.n	800046a <NRF24_read_payload+0x22>
 8000462:	f000 fa7d 	bl	8000960 <NRF24_getPayloadSize>
 8000466:	4603      	mov	r3, r0
 8000468:	e000      	b.n	800046c <NRF24_read_payload+0x24>
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff feee 	bl	8000250 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000474:	2361      	movs	r3, #97	; 0x61
 8000476:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000478:	f107 010e 	add.w	r1, r7, #14
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	2201      	movs	r2, #1
 8000480:	4808      	ldr	r0, [pc, #32]	; (80004a4 <NRF24_read_payload+0x5c>)
 8000482:	f004 fa47 	bl	8004914 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	b29a      	uxth	r2, r3
 800048a:	2364      	movs	r3, #100	; 0x64
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <NRF24_read_payload+0x5c>)
 8000490:	f004 fb83 	bl	8004b9a <HAL_SPI_Receive>
	NRF24_csn(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff fedb 	bl	8000250 <NRF24_csn>
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000b8 	.word	0x200000b8

080004a8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80004ac:	21ff      	movs	r1, #255	; 0xff
 80004ae:	20e1      	movs	r0, #225	; 0xe1
 80004b0:	f7ff ff5e 	bl	8000370 <NRF24_write_register>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80004bc:	21ff      	movs	r1, #255	; 0xff
 80004be:	20e2      	movs	r0, #226	; 0xe2
 80004c0:	f7ff ff56 	bl	8000370 <NRF24_write_register>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80004ce:	2007      	movs	r0, #7
 80004d0:	f7ff fefe 	bl	80002d0 <NRF24_read_register>
 80004d4:	4603      	mov	r3, r0
 80004d6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80004e4:	b082      	sub	sp, #8
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b084      	sub	sp, #16
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]
 80004f4:	4613      	mov	r3, r2
 80004f6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80004f8:	4b66      	ldr	r3, [pc, #408]	; (8000694 <NRF24_begin+0x1b0>)
 80004fa:	4618      	mov	r0, r3
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	2258      	movs	r2, #88	; 0x58
 8000502:	4619      	mov	r1, r3
 8000504:	f005 fdf8 	bl	80060f8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000508:	4a63      	ldr	r2, [pc, #396]	; (8000698 <NRF24_begin+0x1b4>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800050e:	4a63      	ldr	r2, [pc, #396]	; (800069c <NRF24_begin+0x1b8>)
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000514:	4a62      	ldr	r2, [pc, #392]	; (80006a0 <NRF24_begin+0x1bc>)
 8000516:	883b      	ldrh	r3, [r7, #0]
 8000518:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff fe98 	bl	8000250 <NRF24_csn>
	NRF24_ce(0);
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff feb5 	bl	8000290 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000526:	2005      	movs	r0, #5
 8000528:	f001 fe64 	bl	80021f4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800052c:	2108      	movs	r1, #8
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ff1e 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000534:	213f      	movs	r1, #63	; 0x3f
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff ff1a 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800053c:	2103      	movs	r1, #3
 800053e:	2002      	movs	r0, #2
 8000540:	f7ff ff16 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000544:	2103      	movs	r1, #3
 8000546:	2003      	movs	r0, #3
 8000548:	f7ff ff12 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800054c:	2103      	movs	r1, #3
 800054e:	2004      	movs	r0, #4
 8000550:	f7ff ff0e 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000554:	2102      	movs	r1, #2
 8000556:	2005      	movs	r0, #5
 8000558:	f7ff ff0a 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800055c:	210f      	movs	r1, #15
 800055e:	2006      	movs	r0, #6
 8000560:	f7ff ff06 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000564:	210e      	movs	r1, #14
 8000566:	2007      	movs	r0, #7
 8000568:	f7ff ff02 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800056c:	2100      	movs	r1, #0
 800056e:	2008      	movs	r0, #8
 8000570:	f7ff fefe 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000574:	2100      	movs	r1, #0
 8000576:	2009      	movs	r0, #9
 8000578:	f7ff fefa 	bl	8000370 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800057c:	23e7      	movs	r3, #231	; 0xe7
 800057e:	733b      	strb	r3, [r7, #12]
 8000580:	23e7      	movs	r3, #231	; 0xe7
 8000582:	72fb      	strb	r3, [r7, #11]
 8000584:	23e7      	movs	r3, #231	; 0xe7
 8000586:	72bb      	strb	r3, [r7, #10]
 8000588:	23e7      	movs	r3, #231	; 0xe7
 800058a:	727b      	strb	r3, [r7, #9]
 800058c:	23e7      	movs	r3, #231	; 0xe7
 800058e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2205      	movs	r2, #5
 8000596:	4619      	mov	r1, r3
 8000598:	200a      	movs	r0, #10
 800059a:	f7ff ff0b 	bl	80003b4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800059e:	23c2      	movs	r3, #194	; 0xc2
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	23c2      	movs	r3, #194	; 0xc2
 80005a4:	72fb      	strb	r3, [r7, #11]
 80005a6:	23c2      	movs	r3, #194	; 0xc2
 80005a8:	72bb      	strb	r3, [r7, #10]
 80005aa:	23c2      	movs	r3, #194	; 0xc2
 80005ac:	727b      	strb	r3, [r7, #9]
 80005ae:	23c2      	movs	r3, #194	; 0xc2
 80005b0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2205      	movs	r2, #5
 80005b8:	4619      	mov	r1, r3
 80005ba:	200b      	movs	r0, #11
 80005bc:	f7ff fefa 	bl	80003b4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80005c0:	21c3      	movs	r1, #195	; 0xc3
 80005c2:	200c      	movs	r0, #12
 80005c4:	f7ff fed4 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80005c8:	21c4      	movs	r1, #196	; 0xc4
 80005ca:	200d      	movs	r0, #13
 80005cc:	f7ff fed0 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80005d0:	21c5      	movs	r1, #197	; 0xc5
 80005d2:	200e      	movs	r0, #14
 80005d4:	f7ff fecc 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80005d8:	21c6      	movs	r1, #198	; 0xc6
 80005da:	200f      	movs	r0, #15
 80005dc:	f7ff fec8 	bl	8000370 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80005e0:	23e7      	movs	r3, #231	; 0xe7
 80005e2:	733b      	strb	r3, [r7, #12]
 80005e4:	23e7      	movs	r3, #231	; 0xe7
 80005e6:	72fb      	strb	r3, [r7, #11]
 80005e8:	23e7      	movs	r3, #231	; 0xe7
 80005ea:	72bb      	strb	r3, [r7, #10]
 80005ec:	23e7      	movs	r3, #231	; 0xe7
 80005ee:	727b      	strb	r3, [r7, #9]
 80005f0:	23e7      	movs	r3, #231	; 0xe7
 80005f2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2205      	movs	r2, #5
 80005fa:	4619      	mov	r1, r3
 80005fc:	2010      	movs	r0, #16
 80005fe:	f7ff fed9 	bl	80003b4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000602:	2100      	movs	r1, #0
 8000604:	2011      	movs	r0, #17
 8000606:	f7ff feb3 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800060a:	2100      	movs	r1, #0
 800060c:	2012      	movs	r0, #18
 800060e:	f7ff feaf 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000612:	2100      	movs	r1, #0
 8000614:	2013      	movs	r0, #19
 8000616:	f7ff feab 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800061a:	2100      	movs	r1, #0
 800061c:	2014      	movs	r0, #20
 800061e:	f7ff fea7 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	2015      	movs	r0, #21
 8000626:	f7ff fea3 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800062a:	2100      	movs	r1, #0
 800062c:	2016      	movs	r0, #22
 800062e:	f7ff fe9f 	bl	8000370 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000632:	f000 fb11 	bl	8000c58 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	201c      	movs	r0, #28
 800063a:	f7ff fe99 	bl	8000370 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	201d      	movs	r0, #29
 8000642:	f7ff fe95 	bl	8000370 <NRF24_write_register>
	printRadioSettings();
 8000646:	f000 fb21 	bl	8000c8c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800064a:	210f      	movs	r1, #15
 800064c:	200f      	movs	r0, #15
 800064e:	f000 f941 	bl	80008d4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 f9ae 	bl	80009b4 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 f9e5 	bl	8000a28 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800065e:	2002      	movs	r0, #2
 8000660:	f000 fa28 	bl	8000ab4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000664:	f000 f98e 	bl	8000984 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000668:	2020      	movs	r0, #32
 800066a:	f000 f963 	bl	8000934 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800066e:	f000 faea 	bl	8000c46 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000672:	204c      	movs	r0, #76	; 0x4c
 8000674:	f000 f949 	bl	800090a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000678:	f7ff ff16 	bl	80004a8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800067c:	f7ff ff1c 	bl	80004b8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000680:	f000 fa40 	bl	8000b04 <NRF24_powerDown>
	
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068e:	b002      	add	sp, #8
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	200000b8 	.word	0x200000b8
 8000698:	200000b0 	.word	0x200000b0
 800069c:	200000b4 	.word	0x200000b4
 80006a0:	200000b6 	.word	0x200000b6

080006a4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff fe11 	bl	80002d0 <NRF24_read_register>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f043 0303 	orr.w	r3, r3, #3
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fe59 	bl	8000370 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <NRF24_startListening+0x48>)
 80006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	d004      	beq.n	80006d2 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80006c8:	2205      	movs	r2, #5
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <NRF24_startListening+0x48>)
 80006cc:	200a      	movs	r0, #10
 80006ce:	f7ff fe71 	bl	80003b4 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80006d2:	f7ff fee9 	bl	80004a8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80006d6:	f7ff feef 	bl	80004b8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff fdd8 	bl	8000290 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80006e0:	2096      	movs	r0, #150	; 0x96
 80006e2:	f7ff fd95 	bl	8000210 <NRF24_DelayMicroSeconds>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fdcb 	bl	8000290 <NRF24_ce>
	NRF24_flush_tx();
 80006fa:	f7ff fed5 	bl	80004a8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80006fe:	f7ff fedb 	bl	80004b8 <NRF24_flush_rx>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000714:	f000 fa97 	bl	8000c46 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 fa30 	bl	8000b82 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000722:	f001 fd5d 	bl	80021e0 <HAL_GetTick>
 8000726:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000728:	230a      	movs	r3, #10
 800072a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800072c:	f107 030d 	add.w	r3, r7, #13
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	2008      	movs	r0, #8
 8000736:	f7ff fdf3 	bl	8000320 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800073a:	f7ff fec5 	bl	80004c8 <NRF24_get_status>
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000748:	2b00      	cmp	r3, #0
 800074a:	d107      	bne.n	800075c <NRF24_write+0x54>
 800074c:	f001 fd48 	bl	80021e0 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8e7      	bhi.n	800072c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800075c:	f107 010b 	add.w	r1, r7, #11
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <NRF24_write+0x90>)
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fa3a 	bl	8000be0 <NRF24_whatHappened>
	retStatus = tx_ok;
 800076c:	7b3b      	ldrb	r3, [r7, #12]
 800076e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <NRF24_write+0x90>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000778:	f000 f8fc 	bl	8000974 <NRF24_getDynamicPayloadSize>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <NRF24_write+0x94>)
 8000782:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000784:	f000 f80c 	bl	80007a0 <NRF24_available>
	NRF24_flush_tx();
 8000788:	f7ff fe8e 	bl	80004a8 <NRF24_flush_tx>
	return retStatus;
 800078c:	7bbb      	ldrb	r3, [r7, #14]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000a8 	.word	0x200000a8
 800079c:	200000a9 	.word	0x200000a9

080007a0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f9bc 	bl	8000b22 <NRF24_availablePipe>
 80007aa:	4603      	mov	r3, r0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe41 	bl	8000448 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80007c6:	2017      	movs	r0, #23
 80007c8:	f7ff fd82 	bl	80002d0 <NRF24_read_register>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80007d4:	f7ff fe70 	bl	80004b8 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80007d8:	f000 f8cc 	bl	8000974 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80007fa:	463b      	mov	r3, r7
 80007fc:	2205      	movs	r2, #5
 80007fe:	4619      	mov	r1, r3
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff fdd7 	bl	80003b4 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000806:	463b      	mov	r3, r7
 8000808:	2205      	movs	r2, #5
 800080a:	4619      	mov	r1, r3
 800080c:	2010      	movs	r0, #16
 800080e:	f7ff fdd1 	bl	80003b4 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000812:	2320      	movs	r3, #32
 8000814:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <NRF24_openWritingPipe+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	4293      	cmp	r3, r2
 800081e:	bf28      	it	cs
 8000820:	4613      	movcs	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4619      	mov	r1, r3
 8000826:	2011      	movs	r0, #17
 8000828:	f7ff fda2 	bl	8000370 <NRF24_write_register>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000aa 	.word	0x200000aa

08000838 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4601      	mov	r1, r0
 8000840:	e9c7 2300 	strd	r2, r3, [r7]
 8000844:	460b      	mov	r3, r1
 8000846:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800084e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000852:	491c      	ldr	r1, [pc, #112]	; (80008c4 <NRF24_openReadingPipe+0x8c>)
 8000854:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b06      	cmp	r3, #6
 800085c:	d82d      	bhi.n	80008ba <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d808      	bhi.n	8000876 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <NRF24_openReadingPipe+0x90>)
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	4639      	mov	r1, r7
 800086c:	2205      	movs	r2, #5
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fda0 	bl	80003b4 <NRF24_write_registerN>
 8000874:	e007      	b.n	8000886 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <NRF24_openReadingPipe+0x90>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	4639      	mov	r1, r7
 800087e:	2201      	movs	r2, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fd97 	bl	80003b4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <NRF24_openReadingPipe+0x94>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <NRF24_openReadingPipe+0x98>)
 800088e:	7812      	ldrb	r2, [r2, #0]
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fd6c 	bl	8000370 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fd19 	bl	80002d0 <NRF24_read_register>
 800089e:	4603      	mov	r3, r0
 80008a0:	b25a      	sxtb	r2, r3
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff fd5b 	bl	8000370 <NRF24_write_register>
	}
	
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a0 	.word	0x200000a0
 80008c8:	08007118 	.word	0x08007118
 80008cc:	08007120 	.word	0x08007120
 80008d0:	200000aa 	.word	0x200000aa

080008d4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fd37 	bl	8000370 <NRF24_write_register>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000914:	237f      	movs	r3, #127	; 0x7f
 8000916:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4293      	cmp	r3, r2
 800091e:	bf28      	it	cs
 8000920:	4613      	movcs	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	2005      	movs	r0, #5
 8000928:	f7ff fd22 	bl	8000370 <NRF24_write_register>
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800093e:	2320      	movs	r3, #32
 8000940:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4293      	cmp	r3, r2
 8000948:	bf28      	it	cs
 800094a:	4613      	movcs	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b03      	ldr	r3, [pc, #12]	; (800095c <NRF24_setPayloadSize+0x28>)
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	200000aa 	.word	0x200000aa

08000960 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	return payload_size;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <NRF24_getPayloadSize+0x10>)
 8000966:	781b      	ldrb	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	200000aa 	.word	0x200000aa

08000974 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000978:	2060      	movs	r0, #96	; 0x60
 800097a:	f7ff fca9 	bl	80002d0 <NRF24_read_register>
 800097e:	4603      	mov	r3, r0
}
 8000980:	4618      	mov	r0, r3
 8000982:	bd80      	pop	{r7, pc}

08000984 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000988:	201d      	movs	r0, #29
 800098a:	f7ff fca1 	bl	80002d0 <NRF24_read_register>
 800098e:	4603      	mov	r3, r0
 8000990:	f023 0304 	bic.w	r3, r3, #4
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4619      	mov	r1, r3
 8000998:	201d      	movs	r0, #29
 800099a:	f7ff fce9 	bl	8000370 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800099e:	2100      	movs	r1, #0
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff fce5 	bl	8000370 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80009a6:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <NRF24_disableDynamicPayloads+0x2c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000ab 	.word	0x200000ab

080009b4 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80009be:	2006      	movs	r0, #6
 80009c0:	f7ff fc86 	bl	80002d0 <NRF24_read_register>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f023 0306 	bic.w	r3, r3, #6
 80009ce:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d104      	bne.n	80009e0 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f043 0306 	orr.w	r3, r3, #6
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e019      	b.n	8000a14 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d104      	bne.n	80009f0 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e011      	b.n	8000a14 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e009      	b.n	8000a14 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d103      	bne.n	8000a14 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	f043 0306 	orr.w	r3, r3, #6
 8000a12:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4619      	mov	r1, r3
 8000a18:	2006      	movs	r0, #6
 8000a1a:	f7ff fca9 	bl	8000370 <NRF24_write_register>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a36:	2006      	movs	r0, #6
 8000a38:	f7ff fc4a 	bl	80002d0 <NRF24_read_register>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <NRF24_setDataRate+0x88>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a4c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d107      	bne.n	8000a64 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <NRF24_setDataRate+0x88>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	f043 0320 	orr.w	r3, r3, #32
 8000a60:	73bb      	strb	r3, [r7, #14]
 8000a62:	e00d      	b.n	8000a80 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d107      	bne.n	8000a7a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <NRF24_setDataRate+0x88>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	73bb      	strb	r3, [r7, #14]
 8000a78:	e002      	b.n	8000a80 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <NRF24_setDataRate+0x88>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	4619      	mov	r1, r3
 8000a84:	2006      	movs	r0, #6
 8000a86:	f7ff fc73 	bl	8000370 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f7ff fc20 	bl	80002d0 <NRF24_read_register>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d102      	bne.n	8000aa0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e002      	b.n	8000aa6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <NRF24_setDataRate+0x88>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000ac 	.word	0x200000ac

08000ab4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fc06 	bl	80002d0 <NRF24_read_register>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f023 030c 	bic.w	r3, r3, #12
 8000aca:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00f      	beq.n	8000af2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d104      	bne.n	8000ae2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e007      	b.n	8000af2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fc3a 	bl	8000370 <NRF24_write_register>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fbe1 	bl	80002d0 <NRF24_read_register>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f023 0302 	bic.w	r3, r3, #2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fc29 	bl	8000370 <NRF24_write_register>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b2a:	f7ff fccd 	bl	80004c8 <NRF24_get_status>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf14      	ite	ne
 8000b3c:	2301      	movne	r3, #1
 8000b3e:	2300      	moveq	r3, #0
 8000b40:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d017      	beq.n	8000b78 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000b5e:	2140      	movs	r1, #64	; 0x40
 8000b60:	2007      	movs	r0, #7
 8000b62:	f7ff fc05 	bl	8000370 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000b70:	2120      	movs	r1, #32
 8000b72:	2007      	movs	r0, #7
 8000b74:	f7ff fbfc 	bl	8000370 <NRF24_write_register>
    }
  }
  return result;
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fb7e 	bl	8000290 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fb9b 	bl	80002d0 <NRF24_read_register>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fbe0 	bl	8000370 <NRF24_write_register>
  NRF24_ce(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fb6d 	bl	8000290 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000bb6:	2096      	movs	r0, #150	; 0x96
 8000bb8:	f7ff fb2a 	bl	8000210 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fc1f 	bl	8000404 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fb62 	bl	8000290 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000bcc:	200f      	movs	r0, #15
 8000bce:	f7ff fb1f 	bl	8000210 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fb5c 	bl	8000290 <NRF24_ce>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000bec:	f7ff fc6c 	bl	80004c8 <NRF24_get_status>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bfa:	2170      	movs	r1, #112	; 0x70
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f7ff fbb7 	bl	8000370 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf14      	ite	ne
 8000c0c:	2301      	movne	r3, #1
 8000c0e:	2300      	moveq	r3, #0
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	701a      	strb	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000c4a:	2170      	movs	r1, #112	; 0x70
 8000c4c:	2007      	movs	r0, #7
 8000c4e:	f7ff fb8f 	bl	8000370 <NRF24_write_register>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff faf6 	bl	8000250 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000c64:	2350      	movs	r3, #80	; 0x50
 8000c66:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000c68:	2373      	movs	r3, #115	; 0x73
 8000c6a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000c6c:	1d39      	adds	r1, r7, #4
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2202      	movs	r2, #2
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <NRF24_ACTIVATE_cmd+0x30>)
 8000c74:	f003 fe4e 	bl	8004914 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fae9 	bl	8000250 <NRF24_csn>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000b8 	.word	0x200000b8

08000c8c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	b0a1      	sub	sp, #132	; 0x84
 8000c90:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	49c3      	ldr	r1, [pc, #780]	; (8000fa4 <printRadioSettings+0x318>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 f9b7 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fa54 	bl	8000150 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f107 0108 	add.w	r1, r7, #8
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	48bd      	ldr	r0, [pc, #756]	; (8000fa8 <printRadioSettings+0x31c>)
 8000cb4:	f004 fb82 	bl	80053bc <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fb09 	bl	80002d0 <NRF24_read_register>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000cc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d013      	beq.n	8000cf8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000cd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <printRadioSettings+0x5e>
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	49b2      	ldr	r1, [pc, #712]	; (8000fac <printRadioSettings+0x320>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 f992 	bl	800600c <siprintf>
 8000ce8:	e00c      	b.n	8000d04 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	49b0      	ldr	r1, [pc, #704]	; (8000fb0 <printRadioSettings+0x324>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f98b 	bl	800600c <siprintf>
 8000cf6:	e005      	b.n	8000d04 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	49ad      	ldr	r1, [pc, #692]	; (8000fb4 <printRadioSettings+0x328>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 f984 	bl	800600c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa21 	bl	8000150 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 0108 	add.w	r1, r7, #8
 8000d16:	230a      	movs	r3, #10
 8000d18:	48a3      	ldr	r0, [pc, #652]	; (8000fa8 <printRadioSettings+0x31c>)
 8000d1a:	f004 fb4f 	bl	80053bc <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fad6 	bl	80002d0 <NRF24_read_register>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d2e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bfcc      	ite	gt
 8000d36:	2301      	movgt	r3, #1
 8000d38:	2300      	movle	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d42:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bfcc      	ite	gt
 8000d4a:	2301      	movgt	r3, #1
 8000d4c:	2300      	movle	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d56:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bfcc      	ite	gt
 8000d5e:	2301      	movgt	r3, #1
 8000d60:	2300      	movle	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d6a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfcc      	ite	gt
 8000d72:	2301      	movgt	r3, #1
 8000d74:	2300      	movle	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d7e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfcc      	ite	gt
 8000d86:	2301      	movgt	r3, #1
 8000d88:	2300      	movle	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d92:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfcc      	ite	gt
 8000d9a:	2301      	movgt	r3, #1
 8000d9c:	2300      	movle	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f107 0008 	add.w	r0, r7, #8
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	9402      	str	r4, [sp, #8]
 8000da8:	9101      	str	r1, [sp, #4]
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	4633      	mov	r3, r6
 8000dae:	462a      	mov	r2, r5
 8000db0:	4981      	ldr	r1, [pc, #516]	; (8000fb8 <printRadioSettings+0x32c>)
 8000db2:	f005 f92b 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff f9c8 	bl	8000150 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	f107 0108 	add.w	r1, r7, #8
 8000dc8:	230a      	movs	r3, #10
 8000dca:	4877      	ldr	r0, [pc, #476]	; (8000fa8 <printRadioSettings+0x31c>)
 8000dcc:	f004 faf6 	bl	80053bc <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fa7d 	bl	80002d0 <NRF24_read_register>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000de0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bfcc      	ite	gt
 8000de8:	2301      	movgt	r3, #1
 8000dea:	2300      	movle	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000df0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000df4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bfcc      	ite	gt
 8000dfc:	2301      	movgt	r3, #1
 8000dfe:	2300      	movle	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e08:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bfcc      	ite	gt
 8000e10:	2301      	movgt	r3, #1
 8000e12:	2300      	movle	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e1c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfcc      	ite	gt
 8000e24:	2301      	movgt	r3, #1
 8000e26:	2300      	movle	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e30:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bfcc      	ite	gt
 8000e38:	2301      	movgt	r3, #1
 8000e3a:	2300      	movle	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e44:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bfcc      	ite	gt
 8000e4c:	2301      	movgt	r3, #1
 8000e4e:	2300      	movle	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f107 0008 	add.w	r0, r7, #8
 8000e56:	9303      	str	r3, [sp, #12]
 8000e58:	9402      	str	r4, [sp, #8]
 8000e5a:	9101      	str	r1, [sp, #4]
 8000e5c:	9200      	str	r2, [sp, #0]
 8000e5e:	4633      	mov	r3, r6
 8000e60:	462a      	mov	r2, r5
 8000e62:	4956      	ldr	r1, [pc, #344]	; (8000fbc <printRadioSettings+0x330>)
 8000e64:	f005 f8d2 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f96f 	bl	8000150 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	f107 0108 	add.w	r1, r7, #8
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	484a      	ldr	r0, [pc, #296]	; (8000fa8 <printRadioSettings+0x31c>)
 8000e7e:	f004 fa9d 	bl	80053bc <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e82:	2003      	movs	r0, #3
 8000e84:	f7ff fa24 	bl	80002d0 <NRF24_read_register>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e96:	3302      	adds	r3, #2
 8000e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e9c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4946      	ldr	r1, [pc, #280]	; (8000fc0 <printRadioSettings+0x334>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 f8b0 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff f94d 	bl	8000150 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f107 0108 	add.w	r1, r7, #8
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	4839      	ldr	r0, [pc, #228]	; (8000fa8 <printRadioSettings+0x31c>)
 8000ec2:	f004 fa7b 	bl	80053bc <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f7ff fa02 	bl	80002d0 <NRF24_read_register>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000ed2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4939      	ldr	r1, [pc, #228]	; (8000fc4 <printRadioSettings+0x338>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 f893 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f930 	bl	8000150 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f107 0108 	add.w	r1, r7, #8
 8000ef8:	230a      	movs	r3, #10
 8000efa:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <printRadioSettings+0x31c>)
 8000efc:	f004 fa5e 	bl	80053bc <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff f9e5 	bl	80002d0 <NRF24_read_register>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <printRadioSettings+0x29a>
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	492a      	ldr	r1, [pc, #168]	; (8000fc8 <printRadioSettings+0x33c>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 f874 	bl	800600c <siprintf>
 8000f24:	e005      	b.n	8000f32 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4928      	ldr	r1, [pc, #160]	; (8000fcc <printRadioSettings+0x340>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 f86d 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f90a 	bl	8000150 <strlen>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	230a      	movs	r3, #10
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <printRadioSettings+0x31c>)
 8000f48:	f004 fa38 	bl	80053bc <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f50:	f003 0306 	and.w	r3, r3, #6
 8000f54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000f58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f5c:	085b      	lsrs	r3, r3, #1
 8000f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <printRadioSettings+0x2ec>
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4918      	ldr	r1, [pc, #96]	; (8000fd0 <printRadioSettings+0x344>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 f84b 	bl	800600c <siprintf>
 8000f76:	e03b      	b.n	8000ff0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <printRadioSettings+0x302>
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <printRadioSettings+0x348>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 f840 	bl	800600c <siprintf>
 8000f8c:	e030      	b.n	8000ff0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d122      	bne.n	8000fdc <printRadioSettings+0x350>
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	490f      	ldr	r1, [pc, #60]	; (8000fd8 <printRadioSettings+0x34c>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 f835 	bl	800600c <siprintf>
 8000fa2:	e025      	b.n	8000ff0 <printRadioSettings+0x364>
 8000fa4:	080069cc 	.word	0x080069cc
 8000fa8:	20000110 	.word	0x20000110
 8000fac:	08006a00 	.word	0x08006a00
 8000fb0:	08006a1c 	.word	0x08006a1c
 8000fb4:	08006a38 	.word	0x08006a38
 8000fb8:	08006a4c 	.word	0x08006a4c
 8000fbc:	08006a90 	.word	0x08006a90
 8000fc0:	08006adc 	.word	0x08006adc
 8000fc4:	08006af8 	.word	0x08006af8
 8000fc8:	08006b0c 	.word	0x08006b0c
 8000fcc:	08006b24 	.word	0x08006b24
 8000fd0:	08006b3c 	.word	0x08006b3c
 8000fd4:	08006b50 	.word	0x08006b50
 8000fd8:	08006b64 	.word	0x08006b64
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000fdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d105      	bne.n	8000ff0 <printRadioSettings+0x364>
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	49d7      	ldr	r1, [pc, #860]	; (8001348 <printRadioSettings+0x6bc>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f80e 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8ab 	bl	8000150 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f107 0108 	add.w	r1, r7, #8
 8001002:	230a      	movs	r3, #10
 8001004:	48d1      	ldr	r0, [pc, #836]	; (800134c <printRadioSettings+0x6c0>)
 8001006:	f004 f9d9 	bl	80053bc <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800100a:	463b      	mov	r3, r7
 800100c:	2205      	movs	r2, #5
 800100e:	4619      	mov	r1, r3
 8001010:	200a      	movs	r0, #10
 8001012:	f7ff f985 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	461c      	mov	r4, r3
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	461d      	mov	r5, r3
 800101e:	78bb      	ldrb	r3, [r7, #2]
 8001020:	787a      	ldrb	r2, [r7, #1]
 8001022:	7839      	ldrb	r1, [r7, #0]
 8001024:	f107 0008 	add.w	r0, r7, #8
 8001028:	9102      	str	r1, [sp, #8]
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	462b      	mov	r3, r5
 8001030:	4622      	mov	r2, r4
 8001032:	49c7      	ldr	r1, [pc, #796]	; (8001350 <printRadioSettings+0x6c4>)
 8001034:	f004 ffea 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f887 	bl	8000150 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0108 	add.w	r1, r7, #8
 800104a:	230a      	movs	r3, #10
 800104c:	48bf      	ldr	r0, [pc, #764]	; (800134c <printRadioSettings+0x6c0>)
 800104e:	f004 f9b5 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001052:	463b      	mov	r3, r7
 8001054:	2205      	movs	r2, #5
 8001056:	4619      	mov	r1, r3
 8001058:	200b      	movs	r0, #11
 800105a:	f7ff f961 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	461c      	mov	r4, r3
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	461d      	mov	r5, r3
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	787a      	ldrb	r2, [r7, #1]
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	f107 0008 	add.w	r0, r7, #8
 8001070:	9102      	str	r1, [sp, #8]
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	462b      	mov	r3, r5
 8001078:	4622      	mov	r2, r4
 800107a:	49b6      	ldr	r1, [pc, #728]	; (8001354 <printRadioSettings+0x6c8>)
 800107c:	f004 ffc6 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f863 	bl	8000150 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	230a      	movs	r3, #10
 8001094:	48ad      	ldr	r0, [pc, #692]	; (800134c <printRadioSettings+0x6c0>)
 8001096:	f004 f991 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800109a:	463b      	mov	r3, r7
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	200c      	movs	r0, #12
 80010a2:	f7ff f93d 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010a6:	783b      	ldrb	r3, [r7, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	49aa      	ldr	r1, [pc, #680]	; (8001358 <printRadioSettings+0x6cc>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 ffab 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f848 	bl	8000150 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f107 0108 	add.w	r1, r7, #8
 80010c8:	230a      	movs	r3, #10
 80010ca:	48a0      	ldr	r0, [pc, #640]	; (800134c <printRadioSettings+0x6c0>)
 80010cc:	f004 f976 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80010d0:	463b      	mov	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	4619      	mov	r1, r3
 80010d6:	200d      	movs	r0, #13
 80010d8:	f7ff f922 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010dc:	783b      	ldrb	r3, [r7, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	499d      	ldr	r1, [pc, #628]	; (800135c <printRadioSettings+0x6d0>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 ff90 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f82d 	bl	8000150 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f107 0108 	add.w	r1, r7, #8
 80010fe:	230a      	movs	r3, #10
 8001100:	4892      	ldr	r0, [pc, #584]	; (800134c <printRadioSettings+0x6c0>)
 8001102:	f004 f95b 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001106:	463b      	mov	r3, r7
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	200e      	movs	r0, #14
 800110e:	f7ff f907 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4991      	ldr	r1, [pc, #580]	; (8001360 <printRadioSettings+0x6d4>)
 800111c:	4618      	mov	r0, r3
 800111e:	f004 ff75 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f812 	bl	8000150 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f107 0108 	add.w	r1, r7, #8
 8001134:	230a      	movs	r3, #10
 8001136:	4885      	ldr	r0, [pc, #532]	; (800134c <printRadioSettings+0x6c0>)
 8001138:	f004 f940 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800113c:	463b      	mov	r3, r7
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	200f      	movs	r0, #15
 8001144:	f7ff f8ec 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001148:	783b      	ldrb	r3, [r7, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4984      	ldr	r1, [pc, #528]	; (8001364 <printRadioSettings+0x6d8>)
 8001152:	4618      	mov	r0, r3
 8001154:	f004 ff5a 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4618      	mov	r0, r3
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	230a      	movs	r3, #10
 800116c:	4877      	ldr	r0, [pc, #476]	; (800134c <printRadioSettings+0x6c0>)
 800116e:	f004 f925 	bl	80053bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001172:	463b      	mov	r3, r7
 8001174:	2205      	movs	r2, #5
 8001176:	4619      	mov	r1, r3
 8001178:	2010      	movs	r0, #16
 800117a:	f7ff f8d1 	bl	8000320 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	461c      	mov	r4, r3
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	461d      	mov	r5, r3
 8001186:	78bb      	ldrb	r3, [r7, #2]
 8001188:	787a      	ldrb	r2, [r7, #1]
 800118a:	7839      	ldrb	r1, [r7, #0]
 800118c:	f107 0008 	add.w	r0, r7, #8
 8001190:	9102      	str	r1, [sp, #8]
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	462b      	mov	r3, r5
 8001198:	4622      	mov	r2, r4
 800119a:	4973      	ldr	r1, [pc, #460]	; (8001368 <printRadioSettings+0x6dc>)
 800119c:	f004 ff36 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7fe ffd3 	bl	8000150 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	230a      	movs	r3, #10
 80011b4:	4865      	ldr	r0, [pc, #404]	; (800134c <printRadioSettings+0x6c0>)
 80011b6:	f004 f901 	bl	80053bc <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80011ba:	2011      	movs	r0, #17
 80011bc:	f7ff f888 	bl	80002d0 <NRF24_read_register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4966      	ldr	r1, [pc, #408]	; (800136c <printRadioSettings+0x6e0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 ff19 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe ffb6 	bl	8000150 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	230a      	movs	r3, #10
 80011ee:	4857      	ldr	r0, [pc, #348]	; (800134c <printRadioSettings+0x6c0>)
 80011f0:	f004 f8e4 	bl	80053bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80011f4:	2012      	movs	r0, #18
 80011f6:	f7ff f86b 	bl	80002d0 <NRF24_read_register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4958      	ldr	r1, [pc, #352]	; (8001370 <printRadioSettings+0x6e4>)
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fefc 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ff99 	bl	8000150 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f107 0108 	add.w	r1, r7, #8
 8001226:	230a      	movs	r3, #10
 8001228:	4848      	ldr	r0, [pc, #288]	; (800134c <printRadioSettings+0x6c0>)
 800122a:	f004 f8c7 	bl	80053bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800122e:	2013      	movs	r0, #19
 8001230:	f7ff f84e 	bl	80002d0 <NRF24_read_register>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800123a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	494b      	ldr	r1, [pc, #300]	; (8001374 <printRadioSettings+0x6e8>)
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fedf 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f7fe ff7c 	bl	8000150 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	f107 0108 	add.w	r1, r7, #8
 8001260:	230a      	movs	r3, #10
 8001262:	483a      	ldr	r0, [pc, #232]	; (800134c <printRadioSettings+0x6c0>)
 8001264:	f004 f8aa 	bl	80053bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001268:	2014      	movs	r0, #20
 800126a:	f7ff f831 	bl	80002d0 <NRF24_read_register>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	493d      	ldr	r1, [pc, #244]	; (8001378 <printRadioSettings+0x6ec>)
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fec2 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ff5f 	bl	8000150 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f107 0108 	add.w	r1, r7, #8
 800129a:	230a      	movs	r3, #10
 800129c:	482b      	ldr	r0, [pc, #172]	; (800134c <printRadioSettings+0x6c0>)
 800129e:	f004 f88d 	bl	80053bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80012a2:	2015      	movs	r0, #21
 80012a4:	f7ff f814 	bl	80002d0 <NRF24_read_register>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4930      	ldr	r1, [pc, #192]	; (800137c <printRadioSettings+0x6f0>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fea5 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff42 	bl	8000150 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f107 0108 	add.w	r1, r7, #8
 80012d4:	230a      	movs	r3, #10
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <printRadioSettings+0x6c0>)
 80012d8:	f004 f870 	bl	80053bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80012dc:	2016      	movs	r0, #22
 80012de:	f7fe fff7 	bl	80002d0 <NRF24_read_register>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	4922      	ldr	r1, [pc, #136]	; (8001380 <printRadioSettings+0x6f4>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fe88 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff25 	bl	8000150 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	f107 0108 	add.w	r1, r7, #8
 800130e:	230a      	movs	r3, #10
 8001310:	480e      	ldr	r0, [pc, #56]	; (800134c <printRadioSettings+0x6c0>)
 8001312:	f004 f853 	bl	80053bc <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001316:	201c      	movs	r0, #28
 8001318:	f7fe ffda 	bl	80002d0 <NRF24_read_register>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001322:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001326:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132a:	2b00      	cmp	r3, #0
 800132c:	bfcc      	ite	gt
 800132e:	2301      	movgt	r3, #1
 8001330:	2300      	movle	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001336:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800133e:	2b00      	cmp	r3, #0
 8001340:	bfcc      	ite	gt
 8001342:	2301      	movgt	r3, #1
 8001344:	2300      	movle	r3, #0
 8001346:	e01d      	b.n	8001384 <printRadioSettings+0x6f8>
 8001348:	08006b78 	.word	0x08006b78
 800134c:	20000110 	.word	0x20000110
 8001350:	08006b8c 	.word	0x08006b8c
 8001354:	08006bbc 	.word	0x08006bbc
 8001358:	08006bec 	.word	0x08006bec
 800135c:	08006c14 	.word	0x08006c14
 8001360:	08006c3c 	.word	0x08006c3c
 8001364:	08006c64 	.word	0x08006c64
 8001368:	08006c8c 	.word	0x08006c8c
 800136c:	08006cb8 	.word	0x08006cb8
 8001370:	08006cd4 	.word	0x08006cd4
 8001374:	08006cf0 	.word	0x08006cf0
 8001378:	08006d0c 	.word	0x08006d0c
 800137c:	08006d28 	.word	0x08006d28
 8001380:	08006d44 	.word	0x08006d44
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001388:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001390:	2b00      	cmp	r3, #0
 8001392:	bfcc      	ite	gt
 8001394:	2301      	movgt	r3, #1
 8001396:	2300      	movle	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800139c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bfcc      	ite	gt
 80013a8:	2301      	movgt	r3, #1
 80013aa:	2300      	movle	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bfcc      	ite	gt
 80013bc:	2301      	movgt	r3, #1
 80013be:	2300      	movle	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bfcc      	ite	gt
 80013d0:	2301      	movgt	r3, #1
 80013d2:	2300      	movle	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f107 0008 	add.w	r0, r7, #8
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	9402      	str	r4, [sp, #8]
 80013de:	9101      	str	r1, [sp, #4]
 80013e0:	9200      	str	r2, [sp, #0]
 80013e2:	4633      	mov	r3, r6
 80013e4:	462a      	mov	r2, r5
 80013e6:	4936      	ldr	r1, [pc, #216]	; (80014c0 <printRadioSettings+0x834>)
 80013e8:	f004 fe10 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe fead 	bl	8000150 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f107 0108 	add.w	r1, r7, #8
 80013fe:	230a      	movs	r3, #10
 8001400:	4830      	ldr	r0, [pc, #192]	; (80014c4 <printRadioSettings+0x838>)
 8001402:	f003 ffdb 	bl	80053bc <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001406:	201d      	movs	r0, #29
 8001408:	f7fe ff62 	bl	80002d0 <NRF24_read_register>
 800140c:	4603      	mov	r3, r0
 800140e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001412:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <printRadioSettings+0x7a0>
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4929      	ldr	r1, [pc, #164]	; (80014c8 <printRadioSettings+0x83c>)
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fdf1 	bl	800600c <siprintf>
 800142a:	e005      	b.n	8001438 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4926      	ldr	r1, [pc, #152]	; (80014cc <printRadioSettings+0x840>)
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fdea 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fe87 	bl	8000150 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	481d      	ldr	r0, [pc, #116]	; (80014c4 <printRadioSettings+0x838>)
 800144e:	f003 ffb5 	bl	80053bc <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001452:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <printRadioSettings+0x7e0>
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <printRadioSettings+0x844>)
 8001464:	4618      	mov	r0, r3
 8001466:	f004 fdd1 	bl	800600c <siprintf>
 800146a:	e005      	b.n	8001478 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4918      	ldr	r1, [pc, #96]	; (80014d4 <printRadioSettings+0x848>)
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fdca 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fe67 	bl	8000150 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f107 0108 	add.w	r1, r7, #8
 800148a:	230a      	movs	r3, #10
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <printRadioSettings+0x838>)
 800148e:	f003 ff95 	bl	80053bc <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4910      	ldr	r1, [pc, #64]	; (80014d8 <printRadioSettings+0x84c>)
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fdb7 	bl	800600c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe54 	bl	8000150 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	230a      	movs	r3, #10
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <printRadioSettings+0x838>)
 80014b4:	f003 ff82 	bl	80053bc <HAL_UART_Transmit>
}
 80014b8:	bf00      	nop
 80014ba:	3774      	adds	r7, #116	; 0x74
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	08006d60 	.word	0x08006d60
 80014c4:	20000110 	.word	0x20000110
 80014c8:	08006dac 	.word	0x08006dac
 80014cc:	08006dc4 	.word	0x08006dc4
 80014d0:	08006ddc 	.word	0x08006ddc
 80014d4:	08006df8 	.word	0x08006df8
 80014d8:	080069cc 	.word	0x080069cc

080014dc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80014dc:	b084      	sub	sp, #16
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	f107 0c08 	add.w	ip, r7, #8
 80014e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <nrf24_DebugUART_Init+0x2c>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2248      	movs	r2, #72	; 0x48
 80014f4:	4619      	mov	r1, r3
 80014f6:	f004 fdff 	bl	80060f8 <memcpy>
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001502:	b004      	add	sp, #16
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000110 	.word	0x20000110

0800150c <ee_write_64>:
/*
 * @brief write data into the EEPROM
 * @args UINT32_T ADDRESS TO WRITE , UINT64_T DATA TO WRITE
 * */

bool ee_write_64(uint32_t Address_To_Write, uint64_t Data_To_Write) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 8001518:	f001 f8c0 	bl	800269c <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800151c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	2003      	movs	r0, #3
 8001524:	f001 f84a 	bl	80025bc <HAL_FLASH_Program>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]
			Address_To_Write, Data_To_Write);
	if (status != HAL_OK) {
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <ee_write_64+0x2e>
		HAL_FLASH_Lock();
 8001532:	f001 f8d9 	bl	80026e8 <HAL_FLASH_Lock>
		return false;
 8001536:	2300      	movs	r3, #0
 8001538:	e002      	b.n	8001540 <ee_write_64+0x34>
	} else {
		HAL_FLASH_Lock();
 800153a:	f001 f8d5 	bl	80026e8 <HAL_FLASH_Lock>
		return true;
 800153e:	2301      	movs	r3, #1
	}
	return false;
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <ee_read_64>:
/*
 * Read Data into the EEPROM
 * @brief read uin64_t data type from the ee-prom
 * @args Address to read from the ee-prom
 * */
uint64_t ee_read_64(uint32_t Address_To_Read) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	uint64_t RData;
	HAL_FLASH_Unlock();
 8001550:	f001 f8a4 	bl	800269c <HAL_FLASH_Unlock>
	uint64_t *RDAddr = (uint64_t*) Address_To_Read;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	617b      	str	r3, [r7, #20]
	RData = *RDAddr;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	HAL_FLASH_Lock();
 8001562:	f001 f8c1 	bl	80026e8 <HAL_FLASH_Lock>
	return RData;
 8001566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ee_format_page>:
/*
 * @brief Erase the page before writing data (if using repeated memory location) into the specific page
 * @args Starting adress of the page to eras and nmber of pages to erase
 */
bool ee_format_page(uint32_t Starting_Address, uint8_t Number_Of_Pages) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();
 8001580:	f001 f88c 	bl	800269c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef flashErase;
	uint32_t page_error;
	flashErase.NbPages = Number_Of_Pages;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	61fb      	str	r3, [r7, #28]
	flashErase.PageAddress = Starting_Address;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	61bb      	str	r3, [r7, #24]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
	flashErase.Banks = FLASH_BANK_1; //Later if u will be using high density then consider using bank 2 also
 8001590:	2301      	movs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
	if (HAL_FLASHEx_Erase(&flashErase, &page_error) == HAL_OK) {
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 f964 	bl	800286c <HAL_FLASHEx_Erase>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <ee_format_page+0x3e>
		HAL_FLASH_Lock();
 80015aa:	f001 f89d 	bl	80026e8 <HAL_FLASH_Lock>
		return true;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <ee_format_page+0x40>
	} else {
		return false;
 80015b2:	2300      	movs	r3, #0
	}
	return false;
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015c2:	f000 fdb5 	bl	8002130 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015c6:	f000 f881 	bl	80016cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015ca:	f000 f949 	bl	8001860 <MX_GPIO_Init>
	MX_SPI1_Init();
 80015ce:	f000 f8e7 	bl	80017a0 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80015d2:	f000 f91b 	bl	800180c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80015d6:	f000 f8b5 	bl	8001744 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(Debug_Port, (uint8_t*) rx_data, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	492e      	ldr	r1, [pc, #184]	; (8001698 <main+0xdc>)
 80015de:	482f      	ldr	r0, [pc, #188]	; (800169c <main+0xe0>)
 80015e0:	f003 ff6f 	bl	80054c2 <HAL_UART_Receive_IT>
	Print_Debug_Data((char*) "[SETUP STAGE] MSIOT DP SENSOR STARTED\n");
 80015e4:	482e      	ldr	r0, [pc, #184]	; (80016a0 <main+0xe4>)
 80015e6:	f000 fbfd 	bl	8001de4 <Print_Debug_Data>
	uint64_t READ_PIPE_ADRESS = ee_read_64(PIPE_ADDR_FOR_NRF);
 80015ea:	482e      	ldr	r0, [pc, #184]	; (80016a4 <main+0xe8>)
 80015ec:	f7ff ffac 	bl	8001548 <ee_read_64>
 80015f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	My_Pipe_Address = READ_PIPE_ADRESS;
 80015f4:	492c      	ldr	r1, [pc, #176]	; (80016a8 <main+0xec>)
 80015f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015fa:	e9c1 2300 	strd	r2, r3, [r1]
	nrf_init();
 80015fe:	f000 f9c9 	bl	8001994 <nrf_init>
	HAL_StatusTypeDef DP_STATUS = dp_sens_init();
 8001602:	f7fe fdad 	bl	8000160 <dp_sens_init>
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	if (DP_STATUS != HAL_OK) {
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <main+0x5c>
		Print_Debug_Data((char*) "[SETUP] DP SENSOR INIT ERROR \n");
 8001610:	4826      	ldr	r0, [pc, #152]	; (80016ac <main+0xf0>)
 8001612:	f000 fbe7 	bl	8001de4 <Print_Debug_Data>
		return;
 8001616:	e03a      	b.n	800168e <main+0xd2>
	}
	Print_Debug_Data((char*) "[SETUP] COMPLETED\n");
 8001618:	4825      	ldr	r0, [pc, #148]	; (80016b0 <main+0xf4>)
 800161a:	f000 fbe3 	bl	8001de4 <Print_Debug_Data>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4824      	ldr	r0, [pc, #144]	; (80016b4 <main+0xf8>)
 8001624:	f001 fb66 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f000 fde3 	bl	80021f4 <HAL_Delay>
		//CHECK FOR DATA FROM UART PORT
		if (data_avlbl_from_UART_to_read) {
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <main+0xfc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <main+0xc2>
			Print_Debug_Data(
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <main+0x100>)
 8001638:	f000 fbd4 	bl	8001de4 <Print_Debug_Data>
					(char*) "\nMSG received from UART DEBUG PORT ::> ");
			HAL_UART_Transmit(&huart2, received_data_from_UART, 32, 100);
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	2220      	movs	r2, #32
 8001640:	491f      	ldr	r1, [pc, #124]	; (80016c0 <main+0x104>)
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <main+0xe0>)
 8001644:	f003 feba 	bl	80053bc <HAL_UART_Transmit>
			Print_Debug_Data((char*) "\n");
 8001648:	481e      	ldr	r0, [pc, #120]	; (80016c4 <main+0x108>)
 800164a:	f000 fbcb 	bl	8001de4 <Print_Debug_Data>
			Manage_Received_Data_From_UART((uint8_t*) received_data_from_UART,
 800164e:	2120      	movs	r1, #32
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <main+0x104>)
 8001652:	f000 fbdb 	bl	8001e0c <Manage_Received_Data_From_UART>
					32);
			//AFTER USING THE DATA CLEAR THE RX BUFFER
			uint8_t i;
			if (rx_buffer_pos == 0) { //RESET THE BUFFER ONLY WHEN RX { BUFFER == 0 }
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <main+0x10c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <main+0xbc>
				for (i = 0; i < 20; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
 8001662:	e006      	b.n	8001672 <main+0xb6>
					received_data_from_UART[i] = 0;
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <main+0x104>)
 8001668:	2100      	movs	r1, #0
 800166a:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 20; i++)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	3301      	adds	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b13      	cmp	r3, #19
 8001676:	d9f5      	bls.n	8001664 <main+0xa8>
			}
			data_avlbl_from_UART_to_read = false;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <main+0xfc>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
		}
		//CHECK FOR DATA FROM NRF
		if (NRF24_available()) {
 800167e:	f7ff f88f 	bl	80007a0 <NRF24_available>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ca      	beq.n	800161e <main+0x62>
			HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY();
 8001688:	f000 fcae 	bl	8001fe8 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800168c:	e7c7      	b.n	800161e <main+0x62>
		return;
 800168e:	bf00      	nop
		}
	}
	/* USER CODE END 3 */
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000250 	.word	0x20000250
 800169c:	20000204 	.word	0x20000204
 80016a0:	08006f10 	.word	0x08006f10
 80016a4:	0800f000 	.word	0x0800f000
 80016a8:	20000278 	.word	0x20000278
 80016ac:	08006f38 	.word	0x08006f38
 80016b0:	08006f58 	.word	0x08006f58
 80016b4:	40011000 	.word	0x40011000
 80016b8:	20000274 	.word	0x20000274
 80016bc:	08006f6c 	.word	0x08006f6c
 80016c0:	20000254 	.word	0x20000254
 80016c4:	08006f94 	.word	0x08006f94
 80016c8:	2000024c 	.word	0x2000024c

080016cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	; 0x40
 80016d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	; 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fcc6 	bl	800606c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fc72 	bl	8003fec <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x46>
		Error_Handler();
 800170e:	f000 f93b 	bl	8001988 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fee0 	bl	80044f0 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x6e>
		Error_Handler();
 8001736:	f000 f927 	bl	8001988 <Error_Handler>
	}
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	; 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_I2C1_Init+0x50>)
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <MX_I2C1_Init+0x54>)
 800174c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_I2C1_Init+0x50>)
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_I2C1_Init+0x58>)
 8001752:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_I2C1_Init+0x50>)
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_I2C1_Init+0x50>)
 8001782:	f001 fad1 	bl	8002d28 <HAL_I2C_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800178c:	f000 f8fc 	bl	8001988 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000158 	.word	0x20000158
 8001798:	40005400 	.word	0x40005400
 800179c:	000186a0 	.word	0x000186a0

080017a0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_SPI1_Init+0x64>)
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <MX_SPI1_Init+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_SPI1_Init+0x64>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_SPI1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_SPI1_Init+0x64>)
 80017f2:	f003 f80b 	bl	800480c <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI1_Init+0x60>
		Error_Handler();
 80017fc:	f000 f8c4 	bl	8001988 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001ac 	.word	0x200001ac
 8001808:	40013000 	.word	0x40013000

0800180c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f003 fd6a 	bl	800531c <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800184e:	f000 f89b 	bl	8001988 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000204 	.word	0x20000204
 800185c:	40004400 	.word	0x40004400

08001860 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <MX_GPIO_Init+0xb4>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <MX_GPIO_Init+0xb4>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <MX_GPIO_Init+0xb4>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_GPIO_Init+0xb4>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <MX_GPIO_Init+0xb4>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_GPIO_Init+0xb4>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_GPIO_Init+0xb4>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <MX_GPIO_Init+0xb4>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_GPIO_Init+0xb4>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <MX_GPIO_Init+0xb8>)
 80018c4:	f001 f9fe 	bl	8002cc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin | NRF_CSN_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2103      	movs	r1, #3
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_GPIO_Init+0xbc>)
 80018ce:	f001 f9f9 	bl	8002cc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <MX_GPIO_Init+0xb8>)
 80018ec:	f001 f866 	bl	80029bc <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
	GPIO_InitStruct.Pin = NRF_CE_Pin | NRF_CSN_Pin;
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_GPIO_Init+0xbc>)
 8001908:	f001 f858 	bl	80029bc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40011000 	.word	0x40011000
 800191c:	40010c00 	.word	0x40010c00

08001920 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	if (huart->Instance == USART2) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_UART_RxCpltCallback+0x50>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11a      	bne.n	8001968 <HAL_UART_RxCpltCallback+0x48>
		if (rx_data[0] != '/') { //if it is not equal to 'COMMAND END' then write data into INCREMENTED POS of rx_buffer
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_UART_RxCpltCallback+0x54>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b2f      	cmp	r3, #47	; 0x2f
 8001938:	d00b      	beq.n	8001952 <HAL_UART_RxCpltCallback+0x32>
			received_data_from_UART[rx_buffer_pos++] = rx_data[0];
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_UART_RxCpltCallback+0x58>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	b2d1      	uxtb	r1, r2
 8001942:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_UART_RxCpltCallback+0x58>)
 8001944:	7011      	strb	r1, [r2, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_UART_RxCpltCallback+0x54>)
 800194a:	7819      	ldrb	r1, [r3, #0]
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_UART_RxCpltCallback+0x5c>)
 800194e:	5499      	strb	r1, [r3, r2]
 8001950:	e005      	b.n	800195e <HAL_UART_RxCpltCallback+0x3e>

		} else { // HERE IT MEANS if(rx_data[0] == '/') IF it is equal to 'COMMAND END' then clear the buffer, compare data and move on
			rx_buffer_pos = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_UART_RxCpltCallback+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			//USE THE DATA RECEIVED FROM INTERRUTP HERE
			data_avlbl_from_UART_to_read = true;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_UART_RxCpltCallback+0x60>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
			//process the data, and clear the buffer
		}
		HAL_UART_Receive_IT(&huart2, rx_data, 1); //REINIT THE UART INTERRUPT NOW
 800195e:	2201      	movs	r2, #1
 8001960:	4904      	ldr	r1, [pc, #16]	; (8001974 <HAL_UART_RxCpltCallback+0x54>)
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <HAL_UART_RxCpltCallback+0x64>)
 8001964:	f003 fdad 	bl	80054c2 <HAL_UART_Receive_IT>
	}
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40004400 	.word	0x40004400
 8001974:	20000250 	.word	0x20000250
 8001978:	2000024c 	.word	0x2000024c
 800197c:	20000254 	.word	0x20000254
 8001980:	20000274 	.word	0x20000274
 8001984:	20000204 	.word	0x20000204

08001988 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <nrf_init>:
uint8_t target_channel_addr = 52;

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void nrf_init(void) {
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	b097      	sub	sp, #92	; 0x5c
 8001998:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(NRF_CE_GPIO_Port, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 800199a:	4c1a      	ldr	r4, [pc, #104]	; (8001a04 <nrf_init+0x70>)
 800199c:	4668      	mov	r0, sp
 800199e:	1d23      	adds	r3, r4, #4
 80019a0:	2254      	movs	r2, #84	; 0x54
 80019a2:	4619      	mov	r1, r3
 80019a4:	f004 fba8 	bl	80060f8 <memcpy>
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	2102      	movs	r1, #2
 80019ae:	4816      	ldr	r0, [pc, #88]	; (8001a08 <nrf_init+0x74>)
 80019b0:	f7fe fd98 	bl	80004e4 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 80019b4:	4e15      	ldr	r6, [pc, #84]	; (8001a0c <nrf_init+0x78>)
 80019b6:	466d      	mov	r5, sp
 80019b8:	f106 0410 	add.w	r4, r6, #16
 80019bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019d4:	f7ff fd82 	bl	80014dc <nrf24_DebugUART_Init>
	NRF24_setChannel(My_Channel_Num);
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <nrf_init+0x7c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe ff94 	bl	800090a <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019e2:	2020      	movs	r0, #32
 80019e4:	f7fe ffa6 	bl	8000934 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, My_Pipe_Address);
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <nrf_init+0x80>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7fe ff22 	bl	8000838 <NRF24_openReadingPipe>
	NRF24_startListening();
 80019f4:	f7fe fe56 	bl	80006a4 <NRF24_startListening>
	printRadioSettings();
 80019f8:	f7ff f948 	bl	8000c8c <printRadioSettings>
}
 80019fc:	bf00      	nop
 80019fe:	3704      	adds	r7, #4
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	200001ac 	.word	0x200001ac
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	20000204 	.word	0x20000204
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000278 	.word	0x20000278

08001a18 <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8001a1c:	f7fe fe68 	bl	80006f0 <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <Switch_to_Transmitt_mode+0x24>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7fe fee1 	bl	80007f0 <NRF24_openWritingPipe>
	NRF24_setChannel(target_channel_addr);
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <Switch_to_Transmitt_mode+0x28>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe ff69 	bl	800090a <NRF24_setChannel>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000018 	.word	0x20000018

08001a44 <Switch_to_Receiver_mode>:
void Switch_to_Receiver_mode(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8001a48:	f7fe fe52 	bl	80006f0 <NRF24_stopListening>
	NRF24_setChannel(My_Channel_Num);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <Switch_to_Receiver_mode+0x28>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe ff5a 	bl	800090a <NRF24_setChannel>
	NRF24_openReadingPipe(1, My_Pipe_Address);
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <Switch_to_Receiver_mode+0x2c>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7fe feeb 	bl	8000838 <NRF24_openReadingPipe>
	NRF24_startListening();
 8001a62:	f7fe fe1f 	bl	80006a4 <NRF24_startListening>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000278 	.word	0x20000278

08001a74 <TRANSMITT_UPDATE_OVER_NRF>:
void TRANSMITT_UPDATE_OVER_NRF(char my_tx_data[]) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	Switch_to_Transmitt_mode();
 8001a7c:	f7ff ffcc 	bl	8001a18 <Switch_to_Transmitt_mode>
	for (int i = 0; i < +10; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e024      	b.n	8001ad0 <TRANSMITT_UPDATE_OVER_NRF+0x5c>
		if (!NRF24_write(my_tx_data, 32)) {
 8001a86:	2120      	movs	r1, #32
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7fe fe3d 	bl	8000708 <NRF24_write>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <TRANSMITT_UPDATE_OVER_NRF+0x42>
			NRF24_write(my_tx_data, 32);
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fe33 	bl	8000708 <NRF24_write>
			HAL_UART_Transmit(&huart2,
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	2221      	movs	r2, #33	; 0x21
 8001aa6:	490f      	ldr	r1, [pc, #60]	; (8001ae4 <TRANSMITT_UPDATE_OVER_NRF+0x70>)
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <TRANSMITT_UPDATE_OVER_NRF+0x74>)
 8001aaa:	f003 fc87 	bl	80053bc <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 8001aae:	20c8      	movs	r0, #200	; 0xc8
 8001ab0:	f000 fba0 	bl	80021f4 <HAL_Delay>
 8001ab4:	e009      	b.n	8001aca <TRANSMITT_UPDATE_OVER_NRF+0x56>
		} else {
			HAL_UART_Transmit(&huart2,
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	222a      	movs	r2, #42	; 0x2a
 8001aba:	490c      	ldr	r1, [pc, #48]	; (8001aec <TRANSMITT_UPDATE_OVER_NRF+0x78>)
 8001abc:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <TRANSMITT_UPDATE_OVER_NRF+0x74>)
 8001abe:	f003 fc7d 	bl	80053bc <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 8001ac2:	2064      	movs	r0, #100	; 0x64
 8001ac4:	f000 fb96 	bl	80021f4 <HAL_Delay>
			break;
 8001ac8:	e005      	b.n	8001ad6 <TRANSMITT_UPDATE_OVER_NRF+0x62>
	for (int i = 0; i < +10; i++) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	ddd7      	ble.n	8001a86 <TRANSMITT_UPDATE_OVER_NRF+0x12>
		}
	}
	Switch_to_Receiver_mode();
 8001ad6:	f7ff ffb5 	bl	8001a44 <Switch_to_Receiver_mode>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08006f98 	.word	0x08006f98
 8001ae8:	20000204 	.word	0x20000204
 8001aec:	08006fbc 	.word	0x08006fbc

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_MspInit+0x5c>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_MspInit+0x5c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_MspInit+0x60>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_MspInit+0x60>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <HAL_I2C_MspInit+0x70>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d123      	bne.n	8001bbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b90:	2312      	movs	r3, #18
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0x78>)
 8001ba0:	f000 ff0c 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d12f      	bne.n	8001c50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c20:	23a0      	movs	r3, #160	; 0xa0
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_SPI_MspInit+0x90>)
 8001c34:	f000 fec2 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_SPI_MspInit+0x90>)
 8001c4c:	f000 feb6 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010800 	.word	0x40010800

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d137      	bne.n	8001cf4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	61d3      	str	r3, [r2, #28]
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_UART_MspInit+0xa0>)
 8001cc8:	f000 fe78 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_UART_MspInit+0xa0>)
 8001ce0:	f000 fe6c 	bl	80029bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2026      	movs	r0, #38	; 0x26
 8001cea:	f000 fb7e 	bl	80023ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cee:	2026      	movs	r0, #38	; 0x26
 8001cf0:	f000 fb97 	bl	8002422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40004400 	.word	0x40004400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010800 	.word	0x40010800

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4e:	f000 fa35 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f003 fbd5 	bl	800550c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000204 	.word	0x20000204

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f004 f980 	bl	80060a0 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20005000 	.word	0x20005000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	20000280 	.word	0x20000280
 8001dd4:	200003f0 	.word	0x200003f0

08001dd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <Print_Debug_Data>:
char my_node_id[2] = "01";

/*
 @brief print data, and bool is for printing new line after printing the data
 * */
void Print_Debug_Data(char *Debug_Msg) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(Debug_Port, (uint8_t*) Debug_Msg, strlen(Debug_Msg), 100);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe f9af 	bl	8000150 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <Print_Debug_Data+0x24>)
 8001dfc:	f003 fade 	bl	80053bc <HAL_UART_Transmit>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000204 	.word	0x20000204

08001e0c <Manage_Received_Data_From_UART>:
 * @args will receive the char array and will process it
 * If the command is not starting with * discard it
 * if it starting with * and next array has NRF_ADDR: written, then copy the next two byte and save a
 * corresponding value at the address of NRF data storage
 * */
void Manage_Received_Data_From_UART(uint8_t UART_DATA[], size_t data_length) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	// Check if the first element is '*'
	if (data_length > 0 && UART_DATA[0] == '*') {
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d052      	beq.n	8001ec2 <Manage_Received_Data_From_UART+0xb6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b2a      	cmp	r3, #42	; 0x2a
 8001e22:	d14e      	bne.n	8001ec2 <Manage_Received_Data_From_UART+0xb6>
		// Check if the next bytes form the command "NRF_ADDR:"
		if (data_length >= 9
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d946      	bls.n	8001eb8 <Manage_Received_Data_From_UART+0xac>
				&& strncmp((char*) &UART_DATA[1], "NRF_ADDR:", 9) == 0) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	2209      	movs	r2, #9
 8001e30:	4928      	ldr	r1, [pc, #160]	; (8001ed4 <Manage_Received_Data_From_UART+0xc8>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 f922 	bl	800607c <strncmp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d13c      	bne.n	8001eb8 <Manage_Received_Data_From_UART+0xac>
			// If the condition is met, copy the next two bytes to another array
			uint8_t nrfAddress[2];
			nrfAddress[0] = UART_DATA[10];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7a9b      	ldrb	r3, [r3, #10]
 8001e42:	733b      	strb	r3, [r7, #12]
			nrfAddress[1] = UART_DATA[11];
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7adb      	ldrb	r3, [r3, #11]
 8001e48:	737b      	strb	r3, [r7, #13]
			//process the command
			// Convert ASCII characters to numeric values
			uint8_t highValue = nrfAddress[0] - '0';
 8001e4a:	7b3b      	ldrb	r3, [r7, #12]
 8001e4c:	3b30      	subs	r3, #48	; 0x30
 8001e4e:	77fb      	strb	r3, [r7, #31]
			uint8_t lowValue = nrfAddress[1] - '0';
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	3b30      	subs	r3, #48	; 0x30
 8001e54:	77bb      	strb	r3, [r7, #30]
			// Combine the digits into a single uint8_t
			uint8_t nrf_8_t = (highValue * 10) + lowValue;
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	7fbb      	ldrb	r3, [r7, #30]
 8001e64:	4413      	add	r3, r2
 8001e66:	777b      	strb	r3, [r7, #29]
			//copy the gateway code of finding address, and save the address
			uint64_t NRF_Pipe_Addr = Get_Pipe_Address(nrf_8_t);
 8001e68:	7f7b      	ldrb	r3, [r7, #29]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f840 	bl	8001ef0 <Get_Pipe_Address>
 8001e70:	e9c7 0104 	strd	r0, r1, [r7, #16]
			//ERASE THE PAGE BEFORE WRITING
			bool status = ee_format_page(PIPE_ADDR_FOR_NRF, 1);
 8001e74:	2101      	movs	r1, #1
 8001e76:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <Manage_Received_Data_From_UART+0xcc>)
 8001e78:	f7ff fb7c 	bl	8001574 <ee_format_page>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
			if (!status) {
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <Manage_Received_Data_From_UART+0x86>
				Print_Debug_Data(
 8001e8c:	4813      	ldr	r0, [pc, #76]	; (8001edc <Manage_Received_Data_From_UART+0xd0>)
 8001e8e:	f7ff ffa9 	bl	8001de4 <Print_Debug_Data>
						(char*) "[SETUP STAGE] UNABLE TO ERASE PAGE\n");
			}
			//WRITE IT EEPROM
			if (!ee_write_64(PIPE_ADDR_FOR_NRF, NRF_Pipe_Addr)) {
 8001e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <Manage_Received_Data_From_UART+0xcc>)
 8001e98:	f7ff fb38 	bl	800150c <ee_write_64>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f083 0301 	eor.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <Manage_Received_Data_From_UART+0xa4>
				Print_Debug_Data(
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <Manage_Received_Data_From_UART+0xd4>)
 8001eaa:	f7ff ff9b 	bl	8001de4 <Print_Debug_Data>
				&& strncmp((char*) &UART_DATA[1], "NRF_ADDR:", 9) == 0) {
 8001eae:	e007      	b.n	8001ec0 <Manage_Received_Data_From_UART+0xb4>
						(char*) "[UART CB] UNABLE TO WRITE NRF PIPE ADDRES\n");
			} else {
				Print_Debug_Data(
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <Manage_Received_Data_From_UART+0xd8>)
 8001eb2:	f7ff ff97 	bl	8001de4 <Print_Debug_Data>
				&& strncmp((char*) &UART_DATA[1], "NRF_ADDR:", 9) == 0) {
 8001eb6:	e003      	b.n	8001ec0 <Manage_Received_Data_From_UART+0xb4>
						(char*) "[UART CB] VALID ADDRESS FOUND AND IS SAVED INTO THE EMULATED EEPROM\n");
			}
			//Data written successfully
		} else {
			// Print invalid command if it doesn't match NRF_ADDR:
			Print_Debug_Data((char*) "Invalid command\n");
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <Manage_Received_Data_From_UART+0xdc>)
 8001eba:	f7ff ff93 	bl	8001de4 <Print_Debug_Data>
		if (data_length >= 9
 8001ebe:	e004      	b.n	8001eca <Manage_Received_Data_From_UART+0xbe>
 8001ec0:	e003      	b.n	8001eca <Manage_Received_Data_From_UART+0xbe>
		}
	} else {
		// Print not a valid command if the first element is not '*'
		Print_Debug_Data((char*) "Not a valid command received from UART\n");
 8001ec2:	480a      	ldr	r0, [pc, #40]	; (8001eec <Manage_Received_Data_From_UART+0xe0>)
 8001ec4:	f7ff ff8e 	bl	8001de4 <Print_Debug_Data>
	}
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08006fe8 	.word	0x08006fe8
 8001ed8:	0800f000 	.word	0x0800f000
 8001edc:	08006ff4 	.word	0x08006ff4
 8001ee0:	08007018 	.word	0x08007018
 8001ee4:	08007044 	.word	0x08007044
 8001ee8:	0800708c 	.word	0x0800708c
 8001eec:	080070a0 	.word	0x080070a0

08001ef0 <Get_Pipe_Address>:
uint64_t Get_Pipe_Address(uint8_t nrf_8_t) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	switch (nrf_8_t) {
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d83e      	bhi.n	8001f80 <Get_Pipe_Address+0x90>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <Get_Pipe_Address+0x18>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	08001f39 	.word	0x08001f39
 8001f10:	08001f41 	.word	0x08001f41
 8001f14:	08001f49 	.word	0x08001f49
 8001f18:	08001f51 	.word	0x08001f51
 8001f1c:	08001f59 	.word	0x08001f59
 8001f20:	08001f61 	.word	0x08001f61
 8001f24:	08001f69 	.word	0x08001f69
 8001f28:	08001f71 	.word	0x08001f71
 8001f2c:	08001f79 	.word	0x08001f79
	case 1:
		return 0x11223344AA;
 8001f30:	a319      	add	r3, pc, #100	; (adr r3, 8001f98 <Get_Pipe_Address+0xa8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	e027      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 2:
		return 0x11223344AB;
 8001f38:	a319      	add	r3, pc, #100	; (adr r3, 8001fa0 <Get_Pipe_Address+0xb0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	e023      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 3:
		return 0x11223344AC;
 8001f40:	a319      	add	r3, pc, #100	; (adr r3, 8001fa8 <Get_Pipe_Address+0xb8>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	e01f      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 4:
		return 0x11223344AD;
 8001f48:	a319      	add	r3, pc, #100	; (adr r3, 8001fb0 <Get_Pipe_Address+0xc0>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	e01b      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 5:
		return 0x11223344AE;
 8001f50:	a319      	add	r3, pc, #100	; (adr r3, 8001fb8 <Get_Pipe_Address+0xc8>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	e017      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 6:
		return 0x11223344AF;
 8001f58:	a319      	add	r3, pc, #100	; (adr r3, 8001fc0 <Get_Pipe_Address+0xd0>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	e013      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 7:
		return 0x11223344B0;
 8001f60:	a319      	add	r3, pc, #100	; (adr r3, 8001fc8 <Get_Pipe_Address+0xd8>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	e00f      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 8:
		return 0x11223344B1;
 8001f68:	a319      	add	r3, pc, #100	; (adr r3, 8001fd0 <Get_Pipe_Address+0xe0>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	e00b      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 9:
		return 0x11223344B2;
 8001f70:	a319      	add	r3, pc, #100	; (adr r3, 8001fd8 <Get_Pipe_Address+0xe8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	e007      	b.n	8001f88 <Get_Pipe_Address+0x98>
	case 10:
		return 0x11223344B3;
 8001f78:	a319      	add	r3, pc, #100	; (adr r3, 8001fe0 <Get_Pipe_Address+0xf0>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	e003      	b.n	8001f88 <Get_Pipe_Address+0x98>
	}
	return 0;
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
}
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	f3af 8000 	nop.w
 8001f98:	223344aa 	.word	0x223344aa
 8001f9c:	00000011 	.word	0x00000011
 8001fa0:	223344ab 	.word	0x223344ab
 8001fa4:	00000011 	.word	0x00000011
 8001fa8:	223344ac 	.word	0x223344ac
 8001fac:	00000011 	.word	0x00000011
 8001fb0:	223344ad 	.word	0x223344ad
 8001fb4:	00000011 	.word	0x00000011
 8001fb8:	223344ae 	.word	0x223344ae
 8001fbc:	00000011 	.word	0x00000011
 8001fc0:	223344af 	.word	0x223344af
 8001fc4:	00000011 	.word	0x00000011
 8001fc8:	223344b0 	.word	0x223344b0
 8001fcc:	00000011 	.word	0x00000011
 8001fd0:	223344b1 	.word	0x223344b1
 8001fd4:	00000011 	.word	0x00000011
 8001fd8:	223344b2 	.word	0x223344b2
 8001fdc:	00000011 	.word	0x00000011
 8001fe0:	223344b3 	.word	0x223344b3
 8001fe4:	00000011 	.word	0x00000011

08001fe8 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY>:
void HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	; 0x38
 8001fec:	af00      	add	r7, sp, #0
	char received_data_from_gateway[50] = "";
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	222e      	movs	r2, #46	; 0x2e
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 f836 	bl	800606c <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*) "\n DATA RECEIVED FROM NRF::>> ",
 8002000:	230a      	movs	r3, #10
 8002002:	221d      	movs	r2, #29
 8002004:	4919      	ldr	r1, [pc, #100]	; (800206c <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x84>)
 8002006:	481a      	ldr	r0, [pc, #104]	; (8002070 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x88>)
 8002008:	f003 f9d8 	bl	80053bc <HAL_UART_Transmit>
			strlen("\n DATA RECEIVED FROM NRF::>> "), 10);
	NRF24_read(received_data_from_gateway, 5); //store received data
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2105      	movs	r1, #5
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fbcd 	bl	80007b0 <NRF24_read>
	HAL_UART_Transmit(&huart2, (uint8_t*) received_data_from_gateway, 5, 10);
 8002016:	1d39      	adds	r1, r7, #4
 8002018:	230a      	movs	r3, #10
 800201a:	2205      	movs	r2, #5
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x88>)
 800201e:	f003 f9cd 	bl	80053bc <HAL_UART_Transmit>
 8002022:	88bb      	ldrh	r3, [r7, #4]
	char rcvd_node_id[2];
	memcpy(rcvd_node_id, received_data_from_gateway, 2);
 8002024:	803b      	strh	r3, [r7, #0]
	char rcvd_command = received_data_from_gateway[2];
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	//============CHECK IF NODE MATCH WITH ID======================//
	if (!(memcmp(rcvd_node_id, my_node_id, 2))) {
 800202c:	463b      	mov	r3, r7
 800202e:	2202      	movs	r2, #2
 8002030:	4910      	ldr	r1, [pc, #64]	; (8002074 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x8c>)
 8002032:	4618      	mov	r0, r3
 8002034:	f004 f80a 	bl	800604c <memcmp>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x7c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n NODE ID MATCHED",
 800203e:	230a      	movs	r3, #10
 8002040:	2211      	movs	r2, #17
 8002042:	490d      	ldr	r1, [pc, #52]	; (8002078 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x90>)
 8002044:	480a      	ldr	r0, [pc, #40]	; (8002070 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x88>)
 8002046:	f003 f9b9 	bl	80053bc <HAL_UART_Transmit>
				strlen("\n NODE ID MATCHED"), 10);
	} else {
		return;
	}
	//Read the command and transmitt the DP SENSOR VAL
	if (rcvd_command == '0') {
 800204a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800204e:	2b30      	cmp	r3, #48	; 0x30
 8002050:	d109      	bne.n	8002066 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x7e>
		//transmitt a valuye
		HAL_UART_Transmit(&huart2, (uint8_t*) "\n TRANSMITTING DP DATA",
 8002052:	230a      	movs	r3, #10
 8002054:	2216      	movs	r2, #22
 8002056:	4909      	ldr	r1, [pc, #36]	; (800207c <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x94>)
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x88>)
 800205a:	f003 f9af 	bl	80053bc <HAL_UART_Transmit>
				strlen("\n TRANSMITTING DP DATA"), 10);
		send_DP_sensor_value_to_gateway();
 800205e:	f000 f80f 	bl	8002080 <send_DP_sensor_value_to_gateway>
 8002062:	e000      	b.n	8002066 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x7e>
		return;
 8002064:	bf00      	nop
	}
}
 8002066:	3738      	adds	r7, #56	; 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	080070c8 	.word	0x080070c8
 8002070:	20000204 	.word	0x20000204
 8002074:	20000020 	.word	0x20000020
 8002078:	080070e8 	.word	0x080070e8
 800207c:	080070fc 	.word	0x080070fc

08002080 <send_DP_sensor_value_to_gateway>:

void send_DP_sensor_value_to_gateway(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	; 0x38
 8002084:	af00      	add	r7, sp, #0

	uint32_t PRESSURE = READ_PRESSURE();
 8002086:	f7fe f889 	bl	800019c <READ_PRESSURE>
 800208a:	6378      	str	r0, [r7, #52]	; 0x34
//	uint32_t PRESSURE = 90;
	char buffer[20];
	sprintf(buffer, "%u", PRESSURE);
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <send_DP_sensor_value_to_gateway+0x5c>)
 8002094:	4618      	mov	r0, r3
 8002096:	f003 ffb9 	bl	800600c <siprintf>

	char my_tx_data[32] = "010";
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <send_DP_sensor_value_to_gateway+0x60>)
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
	my_tx_data[3] = buffer[0];
 80020b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020b4:	70fb      	strb	r3, [r7, #3]
	my_tx_data[4] = buffer[1];
 80020b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020ba:	713b      	strb	r3, [r7, #4]
	my_tx_data[5] = buffer[2];
 80020bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020c0:	717b      	strb	r3, [r7, #5]
	my_tx_data[5] = '\r';
 80020c2:	230d      	movs	r3, #13
 80020c4:	717b      	strb	r3, [r7, #5]
	my_tx_data[5] = '\n';
 80020c6:	230a      	movs	r3, #10
 80020c8:	717b      	strb	r3, [r7, #5]
	TRANSMITT_UPDATE_OVER_NRF(my_tx_data); //TRANSMITT MESSAGE TO GATEWAY
 80020ca:	463b      	mov	r3, r7
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fcd1 	bl	8001a74 <TRANSMITT_UPDATE_OVER_NRF>
}
 80020d2:	bf00      	nop
 80020d4:	3738      	adds	r7, #56	; 0x38
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	08007114 	.word	0x08007114
 80020e0:	00303130 	.word	0x00303130

080020e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e4:	f7ff fe78 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ea:	490c      	ldr	r1, [pc, #48]	; (800211c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002100:	4c09      	ldr	r4, [pc, #36]	; (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210e:	f003 ffcd 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002112:	f7ff fa53 	bl	80015bc <main>
  bx lr
 8002116:	4770      	bx	lr
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002120:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8002124:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002128:	200003f0 	.word	0x200003f0

0800212c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_2_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x28>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x28>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f947 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fcd0 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f95f 	bl	800243e <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f000 f927 	bl	80023ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000001c 	.word	0x2000001c
 80021b4:	20000028 	.word	0x20000028
 80021b8:	20000024 	.word	0x20000024

080021bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_IncTick+0x1c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_IncTick+0x20>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_IncTick+0x20>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000028 	.word	0x20000028
 80021dc:	20000284 	.word	0x20000284

080021e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <HAL_GetTick+0x10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000284 	.word	0x20000284

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffe0 	bl	80021e0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000028 	.word	0x20000028

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4906      	ldr	r1, [pc, #24]	; (80022d4 <__NVIC_EnableIRQ+0x34>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff90 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff2d 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff42 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff90 	bl	800232c <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5f 	bl	80022d8 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff35 	bl	80022a0 <__NVIC_EnableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffa2 	bl	8002390 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e020      	b.n	80024c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020e 	bic.w	r2, r2, #14
 800248e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d005      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e051      	b.n	8002594 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020e 	bic.w	r2, r2, #14
 80024fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_DMA_Abort_IT+0xd4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d029      	beq.n	800256e <HAL_DMA_Abort_IT+0xa2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <HAL_DMA_Abort_IT+0xd8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort_IT+0x9e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_DMA_Abort_IT+0xdc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_Abort_IT+0x98>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_DMA_Abort_IT+0xe0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d012      	beq.n	800255e <HAL_DMA_Abort_IT+0x92>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_DMA_Abort_IT+0xe4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00a      	beq.n	8002558 <HAL_DMA_Abort_IT+0x8c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_DMA_Abort_IT+0xe8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <HAL_DMA_Abort_IT+0x86>
 800254c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002550:	e00e      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002556:	e00b      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255c:	e008      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	e005      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002568:	e002      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800256a:	2310      	movs	r3, #16
 800256c:	e000      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800256e:	2301      	movs	r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_DMA_Abort_IT+0xec>)
 8002572:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
    } 
  }
  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40020008 	.word	0x40020008
 80025a4:	4002001c 	.word	0x4002001c
 80025a8:	40020030 	.word	0x40020030
 80025ac:	40020044 	.word	0x40020044
 80025b0:	40020058 	.word	0x40020058
 80025b4:	4002006c 	.word	0x4002006c
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_FLASH_Program+0xd8>)
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_FLASH_Program+0x26>
 80025de:	2302      	movs	r3, #2
 80025e0:	e054      	b.n	800268c <HAL_FLASH_Program+0xd0>
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_FLASH_Program+0xd8>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ec:	f000 f8a8 	bl	8002740 <FLASH_WaitForLastOperation>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d144      	bne.n	8002684 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d102      	bne.n	8002606 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002600:	2301      	movs	r3, #1
 8002602:	757b      	strb	r3, [r7, #21]
 8002604:	e007      	b.n	8002616 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d102      	bne.n	8002612 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800260c:	2302      	movs	r3, #2
 800260e:	757b      	strb	r3, [r7, #21]
 8002610:	e001      	b.n	8002616 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002612:	2304      	movs	r3, #4
 8002614:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002616:	2300      	movs	r3, #0
 8002618:	75bb      	strb	r3, [r7, #22]
 800261a:	e02d      	b.n	8002678 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800261c:	7dbb      	ldrb	r3, [r7, #22]
 800261e:	005a      	lsls	r2, r3, #1
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	eb02 0c03 	add.w	ip, r2, r3
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	0119      	lsls	r1, r3, #4
 800262a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800262e:	f1c1 0620 	rsb	r6, r1, #32
 8002632:	f1a1 0020 	sub.w	r0, r1, #32
 8002636:	fa22 f401 	lsr.w	r4, r2, r1
 800263a:	fa03 f606 	lsl.w	r6, r3, r6
 800263e:	4334      	orrs	r4, r6
 8002640:	fa23 f000 	lsr.w	r0, r3, r0
 8002644:	4304      	orrs	r4, r0
 8002646:	fa23 f501 	lsr.w	r5, r3, r1
 800264a:	b2a3      	uxth	r3, r4
 800264c:	4619      	mov	r1, r3
 800264e:	4660      	mov	r0, ip
 8002650:	f000 f85a 	bl	8002708 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002658:	f000 f872 	bl	8002740 <FLASH_WaitForLastOperation>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_FLASH_Program+0xdc>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <HAL_FLASH_Program+0xdc>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002672:	7dbb      	ldrb	r3, [r7, #22]
 8002674:	3301      	adds	r3, #1
 8002676:	75bb      	strb	r3, [r7, #22]
 8002678:	7dba      	ldrb	r2, [r7, #22]
 800267a:	7d7b      	ldrb	r3, [r7, #21]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3cd      	bcc.n	800261c <HAL_FLASH_Program+0x60>
 8002680:	e000      	b.n	8002684 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002682:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_FLASH_Program+0xd8>)
 8002686:	2200      	movs	r2, #0
 8002688:	761a      	strb	r2, [r3, #24]

  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002694:	20000288 	.word	0x20000288
 8002698:	40022000 	.word	0x40022000

0800269c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_FLASH_Unlock+0x40>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_FLASH_Unlock+0x40>)
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_FLASH_Unlock+0x44>)
 80026b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_FLASH_Unlock+0x40>)
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_FLASH_Unlock+0x48>)
 80026bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_FLASH_Unlock+0x40>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40022000 	.word	0x40022000
 80026e0:	45670123 	.word	0x45670123
 80026e4:	cdef89ab 	.word	0xcdef89ab

080026e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_FLASH_Lock+0x1c>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_FLASH_Lock+0x1c>)
 80026f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000

08002708 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <FLASH_Program_HalfWord+0x30>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <FLASH_Program_HalfWord+0x34>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <FLASH_Program_HalfWord+0x34>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	801a      	strh	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000288 	.word	0x20000288
 800273c:	40022000 	.word	0x40022000

08002740 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fd4a 	bl	80021e0 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800274e:	e010      	b.n	8002772 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d00c      	beq.n	8002772 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <FLASH_WaitForLastOperation+0x2e>
 800275e:	f7ff fd3f 	bl	80021e0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d201      	bcs.n	8002772 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e025      	b.n	80027be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e8      	bne.n	8002750 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 800278c:	2220      	movs	r2, #32
 800278e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <FLASH_WaitForLastOperation+0x88>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027b4:	f000 f80a 	bl	80027cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000

080027cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <FLASH_SetErrorCode+0x98>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 80027ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <FLASH_SetErrorCode+0x98>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 800280c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <FLASH_SetErrorCode+0x98>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <FLASH_SetErrorCode+0x9c>)
 800282c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <FLASH_SetErrorCode+0x98>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <FLASH_SetErrorCode+0x98>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f240 1201 	movw	r2, #257	; 0x101
 8002840:	4293      	cmp	r3, r2
 8002842:	d106      	bne.n	8002852 <FLASH_SetErrorCode+0x86>
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <FLASH_SetErrorCode+0x98>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <FLASH_SetErrorCode+0x98>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	61d3      	str	r3, [r2, #28]
}  
 8002850:	e002      	b.n	8002858 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <FLASH_SetErrorCode+0x98>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60d3      	str	r3, [r2, #12]
}  
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	20000288 	.word	0x20000288

0800286c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_FLASHEx_Erase+0xd0>)
 8002880:	7e1b      	ldrb	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_FLASHEx_Erase+0x1e>
 8002886:	2302      	movs	r3, #2
 8002888:	e053      	b.n	8002932 <HAL_FLASHEx_Erase+0xc6>
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_FLASHEx_Erase+0xd0>)
 800288c:	2201      	movs	r2, #1
 800288e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d116      	bne.n	80028c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002898:	f24c 3050 	movw	r0, #50000	; 0xc350
 800289c:	f7ff ff50 	bl	8002740 <FLASH_WaitForLastOperation>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d141      	bne.n	800292a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 f84c 	bl	8002944 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028b0:	f7ff ff46 	bl	8002740 <FLASH_WaitForLastOperation>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_FLASHEx_Erase+0xd4>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_FLASHEx_Erase+0xd4>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6113      	str	r3, [r2, #16]
 80028c4:	e031      	b.n	800292a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028ca:	f7ff ff39 	bl	8002740 <FLASH_WaitForLastOperation>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d12a      	bne.n	800292a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f04f 32ff 	mov.w	r2, #4294967295
 80028da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	e019      	b.n	8002918 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	f000 f849 	bl	800297c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028ee:	f7ff ff27 	bl	8002740 <FLASH_WaitForLastOperation>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_FLASHEx_Erase+0xd4>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_FLASHEx_Erase+0xd4>)
 80028fc:	f023 0302 	bic.w	r3, r3, #2
 8002900:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	601a      	str	r2, [r3, #0]
            break;
 800290e:	e00c      	b.n	800292a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002916:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	029a      	lsls	r2, r3, #10
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4413      	add	r3, r2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3dc      	bcc.n	80028e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_FLASHEx_Erase+0xd0>)
 800292c:	2200      	movs	r2, #0
 800292e:	761a      	strb	r2, [r3, #24]

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000288 	.word	0x20000288
 8002940:	40022000 	.word	0x40022000

08002944 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <FLASH_MassErase+0x30>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <FLASH_MassErase+0x34>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <FLASH_MassErase+0x34>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <FLASH_MassErase+0x34>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <FLASH_MassErase+0x34>)
 8002964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002968:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000288 	.word	0x20000288
 8002978:	40022000 	.word	0x40022000

0800297c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <FLASH_PageErase+0x38>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <FLASH_PageErase+0x3c>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <FLASH_PageErase+0x3c>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <FLASH_PageErase+0x3c>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <FLASH_PageErase+0x3c>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <FLASH_PageErase+0x3c>)
 80029a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000288 	.word	0x20000288
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ce:	e169      	b.n	8002ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029d0:	2201      	movs	r2, #1
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8158 	bne.w	8002c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a9a      	ldr	r2, [pc, #616]	; (8002c5c <HAL_GPIO_Init+0x2a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d05e      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 80029f8:	4a98      	ldr	r2, [pc, #608]	; (8002c5c <HAL_GPIO_Init+0x2a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d875      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 80029fe:	4a98      	ldr	r2, [pc, #608]	; (8002c60 <HAL_GPIO_Init+0x2a4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d058      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a04:	4a96      	ldr	r2, [pc, #600]	; (8002c60 <HAL_GPIO_Init+0x2a4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d86f      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a0a:	4a96      	ldr	r2, [pc, #600]	; (8002c64 <HAL_GPIO_Init+0x2a8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d052      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a10:	4a94      	ldr	r2, [pc, #592]	; (8002c64 <HAL_GPIO_Init+0x2a8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d869      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a16:	4a94      	ldr	r2, [pc, #592]	; (8002c68 <HAL_GPIO_Init+0x2ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d04c      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a1c:	4a92      	ldr	r2, [pc, #584]	; (8002c68 <HAL_GPIO_Init+0x2ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d863      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a22:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_GPIO_Init+0x2b0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d046      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a28:	4a90      	ldr	r2, [pc, #576]	; (8002c6c <HAL_GPIO_Init+0x2b0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d85d      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a2e:	2b12      	cmp	r3, #18
 8002a30:	d82a      	bhi.n	8002a88 <HAL_GPIO_Init+0xcc>
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d859      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_GPIO_Init+0x80>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002ab7 	.word	0x08002ab7
 8002a40:	08002a91 	.word	0x08002a91
 8002a44:	08002aa3 	.word	0x08002aa3
 8002a48:	08002ae5 	.word	0x08002ae5
 8002a4c:	08002aeb 	.word	0x08002aeb
 8002a50:	08002aeb 	.word	0x08002aeb
 8002a54:	08002aeb 	.word	0x08002aeb
 8002a58:	08002aeb 	.word	0x08002aeb
 8002a5c:	08002aeb 	.word	0x08002aeb
 8002a60:	08002aeb 	.word	0x08002aeb
 8002a64:	08002aeb 	.word	0x08002aeb
 8002a68:	08002aeb 	.word	0x08002aeb
 8002a6c:	08002aeb 	.word	0x08002aeb
 8002a70:	08002aeb 	.word	0x08002aeb
 8002a74:	08002aeb 	.word	0x08002aeb
 8002a78:	08002aeb 	.word	0x08002aeb
 8002a7c:	08002aeb 	.word	0x08002aeb
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002aad 	.word	0x08002aad
 8002a88:	4a79      	ldr	r2, [pc, #484]	; (8002c70 <HAL_GPIO_Init+0x2b4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a8e:	e02c      	b.n	8002aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	623b      	str	r3, [r7, #32]
          break;
 8002a96:	e029      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	623b      	str	r3, [r7, #32]
          break;
 8002aa0:	e024      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	623b      	str	r3, [r7, #32]
          break;
 8002aaa:	e01f      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e01a      	b.n	8002aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e013      	b.n	8002aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002acc:	2308      	movs	r3, #8
 8002ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	611a      	str	r2, [r3, #16]
          break;
 8002ad6:	e009      	b.n	8002aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	615a      	str	r2, [r3, #20]
          break;
 8002ae2:	e003      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
          break;
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x130>
          break;
 8002aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d801      	bhi.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_Init+0x13e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d802      	bhi.n	8002b08 <HAL_GPIO_Init+0x14c>
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	e002      	b.n	8002b0e <HAL_GPIO_Init+0x152>
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3b08      	subs	r3, #8
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	210f      	movs	r1, #15
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	401a      	ands	r2, r3
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80b1 	beq.w	8002c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b54:	4a48      	ldr	r2, [pc, #288]	; (8002c78 <HAL_GPIO_Init+0x2bc>)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <HAL_GPIO_Init+0x2c0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_GPIO_Init+0x1ec>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3f      	ldr	r2, [pc, #252]	; (8002c80 <HAL_GPIO_Init+0x2c4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_GPIO_Init+0x1e8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <HAL_GPIO_Init+0x2c8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_GPIO_Init+0x1e4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_GPIO_Init+0x2cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_GPIO_Init+0x1e0>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e006      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	e004      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e002      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	f002 0203 	and.w	r2, r2, #3
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	4093      	lsls	r3, r2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bba:	492f      	ldr	r1, [pc, #188]	; (8002c78 <HAL_GPIO_Init+0x2bc>)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	492c      	ldr	r1, [pc, #176]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4928      	ldr	r1, [pc, #160]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4922      	ldr	r1, [pc, #136]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60cb      	str	r3, [r1, #12]
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	491e      	ldr	r1, [pc, #120]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4918      	ldr	r1, [pc, #96]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4914      	ldr	r1, [pc, #80]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d021      	beq.n	8002c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e021      	b.n	8002c9e <HAL_GPIO_Init+0x2e2>
 8002c5a:	bf00      	nop
 8002c5c:	10320000 	.word	0x10320000
 8002c60:	10310000 	.word	0x10310000
 8002c64:	10220000 	.word	0x10220000
 8002c68:	10210000 	.word	0x10210000
 8002c6c:	10120000 	.word	0x10120000
 8002c70:	10110000 	.word	0x10110000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40010800 	.word	0x40010800
 8002c80:	40010c00 	.word	0x40010c00
 8002c84:	40011000 	.word	0x40011000
 8002c88:	40011400 	.word	0x40011400
 8002c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f ae8e 	bne.w	80029d0 <HAL_GPIO_Init+0x14>
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	372c      	adds	r7, #44	; 0x2c
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43d9      	mvns	r1, r3
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	400b      	ands	r3, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e12b      	b.n	8002f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe ff00 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d8c:	f001 fcf8 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8002d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a81      	ldr	r2, [pc, #516]	; (8002f9c <HAL_I2C_Init+0x274>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d807      	bhi.n	8002dac <HAL_I2C_Init+0x84>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <HAL_I2C_Init+0x278>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	bf94      	ite	ls
 8002da4:	2301      	movls	r3, #1
 8002da6:	2300      	movhi	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e006      	b.n	8002dba <HAL_I2C_Init+0x92>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a7d      	ldr	r2, [pc, #500]	; (8002fa4 <HAL_I2C_Init+0x27c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0e7      	b.n	8002f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a78      	ldr	r2, [pc, #480]	; (8002fa8 <HAL_I2C_Init+0x280>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0c9b      	lsrs	r3, r3, #18
 8002dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a6a      	ldr	r2, [pc, #424]	; (8002f9c <HAL_I2C_Init+0x274>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d802      	bhi.n	8002dfc <HAL_I2C_Init+0xd4>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	e009      	b.n	8002e10 <HAL_I2C_Init+0xe8>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_I2C_Init+0x284>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	3301      	adds	r3, #1
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	495c      	ldr	r1, [pc, #368]	; (8002f9c <HAL_I2C_Init+0x274>)
 8002e2c:	428b      	cmp	r3, r1
 8002e2e:	d819      	bhi.n	8002e64 <HAL_I2C_Init+0x13c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e59      	subs	r1, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3e:	1c59      	adds	r1, r3, #1
 8002e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e44:	400b      	ands	r3, r1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_I2C_Init+0x138>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	e051      	b.n	8002f04 <HAL_I2C_Init+0x1dc>
 8002e60:	2304      	movs	r3, #4
 8002e62:	e04f      	b.n	8002f04 <HAL_I2C_Init+0x1dc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d111      	bne.n	8002e90 <HAL_I2C_Init+0x168>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e012      	b.n	8002eb6 <HAL_I2C_Init+0x18e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	0099      	lsls	r1, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Init+0x196>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e022      	b.n	8002f04 <HAL_I2C_Init+0x1dc>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_I2C_Init+0x1bc>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1e58      	subs	r0, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	440b      	add	r3, r1
 8002ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee2:	e00f      	b.n	8002f04 <HAL_I2C_Init+0x1dc>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	0099      	lsls	r1, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	6809      	ldr	r1, [r1, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6911      	ldr	r1, [r2, #16]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68d2      	ldr	r2, [r2, #12]
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	000186a0 	.word	0x000186a0
 8002fa0:	001e847f 	.word	0x001e847f
 8002fa4:	003d08ff 	.word	0x003d08ff
 8002fa8:	431bde83 	.word	0x431bde83
 8002fac:	10624dd3 	.word	0x10624dd3

08002fb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	817b      	strh	r3, [r7, #10]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff f90c 	bl	80021e0 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	f040 80e0 	bne.w	8003198 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2319      	movs	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4970      	ldr	r1, [pc, #448]	; (80031a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fdcc 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0d3      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Master_Transmit+0x50>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0cc      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d007      	beq.n	8003026 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2221      	movs	r2, #33	; 0x21
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2210      	movs	r2, #16
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	893a      	ldrh	r2, [r7, #8]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fc36 	bl	80038e0 <I2C_MasterRequestWrite>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e08d      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003094:	e066      	b.n	8003164 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fe8a 	bl	8003db4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06b      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d11b      	bne.n	8003138 <HAL_I2C_Master_Transmit+0x188>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	6a39      	ldr	r1, [r7, #32]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fe81 	bl	8003e44 <I2C_WaitOnBTFFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01a      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d194      	bne.n	8003096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	00100002 	.word	0x00100002
 80031a8:	ffff0000 	.word	0xffff0000

080031ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	; 0x30
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	460b      	mov	r3, r1
 80031ba:	817b      	strh	r3, [r7, #10]
 80031bc:	4613      	mov	r3, r2
 80031be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff f80c 	bl	80021e0 <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	f040 824b 	bne.w	800366e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	497f      	ldr	r1, [pc, #508]	; (80033e0 <HAL_I2C_Master_Receive+0x234>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fccc 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
 80031f0:	e23e      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_Master_Receive+0x54>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e237      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d007      	beq.n	8003226 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2222      	movs	r2, #34	; 0x22
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2210      	movs	r2, #16
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <HAL_I2C_Master_Receive+0x238>)
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fbb8 	bl	80039e4 <I2C_MasterRequestRead>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1f8      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d113      	bne.n	80032ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e1cc      	b.n	8003648 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11e      	bne.n	80032f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032c6:	b672      	cpsid	i
}
 80032c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032f0:	b662      	cpsie	i
}
 80032f2:	e035      	b.n	8003360 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11e      	bne.n	800333a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003336:	b662      	cpsie	i
}
 8003338:	e012      	b.n	8003360 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003360:	e172      	b.n	8003648 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b03      	cmp	r3, #3
 8003368:	f200 811f 	bhi.w	80035aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b01      	cmp	r3, #1
 8003372:	d123      	bne.n	80033bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fdab 	bl	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e173      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ba:	e145      	b.n	8003648 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d152      	bne.n	800346a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	4906      	ldr	r1, [pc, #24]	; (80033e8 <HAL_I2C_Master_Receive+0x23c>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fbd6 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e148      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
 80033de:	bf00      	nop
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000
 80033e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033ec:	b672      	cpsid	i
}
 80033ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003432:	b662      	cpsie	i
}
 8003434:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003468:	e0ee      	b.n	8003648 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	4981      	ldr	r1, [pc, #516]	; (8003678 <HAL_I2C_Master_Receive+0x4cc>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fb83 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0f5      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003494:	b672      	cpsid	i
}
 8003496:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ca:	4b6c      	ldr	r3, [pc, #432]	; (800367c <HAL_I2C_Master_Receive+0x4d0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	4a6b      	ldr	r2, [pc, #428]	; (8003680 <HAL_I2C_Master_Receive+0x4d4>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a1a      	lsrs	r2, r3, #8
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00da      	lsls	r2, r3, #3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d118      	bne.n	8003522 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003512:	b662      	cpsie	i
}
 8003514:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0a6      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d1d9      	bne.n	80034e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003572:	b662      	cpsie	i
}
 8003574:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a8:	e04e      	b.n	8003648 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fc90 	bl	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e058      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d124      	bne.n	8003648 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f ae88 	bne.w	8003362 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	00010004 	.word	0x00010004
 800367c:	2000001c 	.word	0x2000001c
 8003680:	14f8b589 	.word	0x14f8b589

08003684 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	460b      	mov	r3, r1
 8003692:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7fe fda4 	bl	80021e0 <HAL_GetTick>
 8003698:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	f040 8111 	bne.w	80038ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	4988      	ldr	r1, [pc, #544]	; (80038d8 <HAL_I2C_IsDeviceReady+0x254>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa62 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	e104      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_I2C_IsDeviceReady+0x50>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0fd      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d007      	beq.n	80036fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003708:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2224      	movs	r2, #36	; 0x24
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a70      	ldr	r2, [pc, #448]	; (80038dc <HAL_I2C_IsDeviceReady+0x258>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa20 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d103      	bne.n	800375e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0b6      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003770:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fd35 	bl	80021e0 <HAL_GetTick>
 8003776:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037a6:	e025      	b.n	80037f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fe fd1a 	bl	80021e0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <HAL_I2C_IsDeviceReady+0x13a>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22a0      	movs	r2, #160	; 0xa0
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2ba0      	cmp	r3, #160	; 0xa0
 80037fe:	d005      	beq.n	800380c <HAL_I2C_IsDeviceReady+0x188>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_I2C_IsDeviceReady+0x188>
 8003806:	7dbb      	ldrb	r3, [r7, #22]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0cd      	beq.n	80037a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d129      	bne.n	8003876 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2319      	movs	r3, #25
 800384e:	2201      	movs	r2, #1
 8003850:	4921      	ldr	r1, [pc, #132]	; (80038d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f994 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e036      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e02c      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003884:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2319      	movs	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	490f      	ldr	r1, [pc, #60]	; (80038d8 <HAL_I2C_IsDeviceReady+0x254>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f970 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e012      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	f4ff af32 	bcc.w	800371e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000

080038e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d006      	beq.n	800390a <I2C_MasterRequestWrite+0x2a>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d003      	beq.n	800390a <I2C_MasterRequestWrite+0x2a>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003908:	d108      	bne.n	800391c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e00b      	b.n	8003934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	2b12      	cmp	r3, #18
 8003922:	d107      	bne.n	8003934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f91d 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d103      	bne.n	8003964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e035      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003970:	d108      	bne.n	8003984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e01b      	b.n	80039bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f063 030f 	orn	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <I2C_MasterRequestWrite+0xfc>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f966 	bl	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e010      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <I2C_MasterRequestWrite+0x100>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f956 	bl	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010008 	.word	0x00010008
 80039e0:	00010002 	.word	0x00010002

080039e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d006      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d003      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a1c:	d108      	bne.n	8003a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00b      	b.n	8003a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d107      	bne.n	8003a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f893 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	d103      	bne.n	8003a78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e079      	b.n	8003b70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a84:	d108      	bne.n	8003a98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]
 8003a96:	e05f      	b.n	8003b58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a98:	897b      	ldrh	r3, [r7, #10]
 8003a9a:	11db      	asrs	r3, r3, #7
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 0306 	and.w	r3, r3, #6
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f063 030f 	orn	r3, r3, #15
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4930      	ldr	r1, [pc, #192]	; (8003b78 <I2C_MasterRequestRead+0x194>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f8dc 	bl	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e054      	b.n	8003b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4929      	ldr	r1, [pc, #164]	; (8003b7c <I2C_MasterRequestRead+0x198>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8cc 	bl	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e044      	b.n	8003b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f831 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b32:	d103      	bne.n	8003b3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e017      	b.n	8003b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	11db      	asrs	r3, r3, #7
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0306 	and.w	r3, r3, #6
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f063 030e 	orn	r3, r3, #14
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <I2C_MasterRequestRead+0x198>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f888 	bl	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	00010008 	.word	0x00010008
 8003b7c:	00010002 	.word	0x00010002

08003b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	e048      	b.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d044      	beq.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe fb21 	bl	80021e0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d139      	bne.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10d      	bne.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	e00c      	b.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d116      	bne.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e023      	b.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10d      	bne.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	e00c      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d093      	beq.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c82:	e071      	b.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d123      	bne.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e067      	b.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d041      	beq.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fa7c 	bl	80021e0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d136      	bne.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10c      	bne.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e00b      	b.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	43da      	mvns	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e021      	b.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10c      	bne.n	8003d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e00b      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f47f af6d 	bne.w	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f8e3 	bl	8003f8e <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fe fa01 	bl	80021e0 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b80      	cmp	r3, #128	; 0x80
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e50:	e034      	b.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f89b 	bl	8003f8e <I2C_IsAcknowledgeFailed>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e034      	b.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d028      	beq.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7fe f9b9 	bl	80021e0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11d      	bne.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d016      	beq.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e007      	b.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d1c3      	bne.n	8003e52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ee0:	e049      	b.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d119      	bne.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0210 	mvn.w	r2, #16
 8003ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e030      	b.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f24:	f7fe f95c 	bl	80021e0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d016      	beq.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e007      	b.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d1ae      	bne.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d11b      	bne.n	8003fde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f043 0204 	orr.w	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e272      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8087 	beq.w	800411a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800400c:	4b92      	ldr	r3, [pc, #584]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b04      	cmp	r3, #4
 8004016:	d00c      	beq.n	8004032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004018:	4b8f      	ldr	r3, [pc, #572]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d112      	bne.n	800404a <HAL_RCC_OscConfig+0x5e>
 8004024:	4b8c      	ldr	r3, [pc, #560]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d10b      	bne.n	800404a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004032:	4b89      	ldr	r3, [pc, #548]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d06c      	beq.n	8004118 <HAL_RCC_OscConfig+0x12c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d168      	bne.n	8004118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e24c      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x76>
 8004054:	4b80      	ldr	r3, [pc, #512]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a7f      	ldr	r2, [pc, #508]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e02e      	b.n	80040c0 <HAL_RCC_OscConfig+0xd4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x98>
 800406a:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7a      	ldr	r2, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b78      	ldr	r3, [pc, #480]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a77      	ldr	r2, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800407c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e01d      	b.n	80040c0 <HAL_RCC_OscConfig+0xd4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0xbc>
 800408e:	4b72      	ldr	r3, [pc, #456]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a71      	ldr	r2, [pc, #452]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0xd4>
 80040a8:	4b6b      	ldr	r3, [pc, #428]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b68      	ldr	r3, [pc, #416]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a67      	ldr	r2, [pc, #412]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fe f88a 	bl	80021e0 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe f886 	bl	80021e0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e200      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe4>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe f876 	bl	80021e0 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fe f872 	bl	80021e0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1ec      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x10c>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004126:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b08      	cmp	r3, #8
 800413c:	d11c      	bne.n	8004178 <HAL_RCC_OscConfig+0x18c>
 800413e:	4b46      	ldr	r3, [pc, #280]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x176>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1c0      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4939      	ldr	r1, [pc, #228]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	e03a      	b.n	80041ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004180:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe f82b 	bl	80021e0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe f827 	bl	80021e0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1a1      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4927      	ldr	r1, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe f80a 	bl	80021e0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fe f806 	bl	80021e0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e180      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d03a      	beq.n	8004270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d019      	beq.n	8004236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_RCC_OscConfig+0x274>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fd ffea 	bl	80021e0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004210:	f7fd ffe6 	bl	80021e0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e160      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x26c>)
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800422e:	2001      	movs	r0, #1
 8004230:	f000 face 	bl	80047d0 <RCC_Delay>
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <HAL_RCC_OscConfig+0x274>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fd ffd0 	bl	80021e0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004242:	e00f      	b.n	8004264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd ffcc 	bl	80021e0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d908      	bls.n	8004264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e146      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	42420000 	.word	0x42420000
 8004260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	4b92      	ldr	r3, [pc, #584]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e9      	bne.n	8004244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a6 	beq.w	80043ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10d      	bne.n	80042aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	61d3      	str	r3, [r2, #28]
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b82      	ldr	r3, [pc, #520]	; (80044b4 <HAL_RCC_OscConfig+0x4c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <HAL_RCC_OscConfig+0x4c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	; (80044b4 <HAL_RCC_OscConfig+0x4c8>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fd ff8d 	bl	80021e0 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fd ff89 	bl	80021e0 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	; 0x64
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e103      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b75      	ldr	r3, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x4c8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x312>
 80042f0:	4b6f      	ldr	r3, [pc, #444]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4a6e      	ldr	r2, [pc, #440]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6213      	str	r3, [r2, #32]
 80042fc:	e02d      	b.n	800435a <HAL_RCC_OscConfig+0x36e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x334>
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a69      	ldr	r2, [pc, #420]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6213      	str	r3, [r2, #32]
 8004312:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a66      	ldr	r2, [pc, #408]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6213      	str	r3, [r2, #32]
 800431e:	e01c      	b.n	800435a <HAL_RCC_OscConfig+0x36e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d10c      	bne.n	8004342 <HAL_RCC_OscConfig+0x356>
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4a60      	ldr	r2, [pc, #384]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6213      	str	r3, [r2, #32]
 8004334:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6213      	str	r3, [r2, #32]
 8004340:	e00b      	b.n	800435a <HAL_RCC_OscConfig+0x36e>
 8004342:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a5a      	ldr	r2, [pc, #360]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a57      	ldr	r2, [pc, #348]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d015      	beq.n	800438e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fd ff3d 	bl	80021e0 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd ff39 	bl	80021e0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0b1      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ee      	beq.n	800436a <HAL_RCC_OscConfig+0x37e>
 800438c:	e014      	b.n	80043b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd ff27 	bl	80021e0 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd ff23 	bl	80021e0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e09b      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ee      	bne.n	8004396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d105      	bne.n	80043ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8087 	beq.w	80044e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d061      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d146      	bne.n	8004476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e8:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fd fef7 	bl	80021e0 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd fef3 	bl	80021e0 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e06d      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d108      	bne.n	8004430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4921      	ldr	r1, [pc, #132]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a19      	ldr	r1, [r3, #32]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	430b      	orrs	r3, r1
 8004442:	491b      	ldr	r1, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x4cc>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fd fec7 	bl	80021e0 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd fec3 	bl	80021e0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e03d      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x46a>
 8004474:	e035      	b.n	80044e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCC_OscConfig+0x4cc>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd feb0 	bl	80021e0 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fd feac 	bl	80021e0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e026      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x498>
 80044a2:	e01e      	b.n	80044e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e019      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_OscConfig+0x500>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000

080044f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0d0      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d910      	bls.n	8004534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4965      	ldr	r1, [pc, #404]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b63      	ldr	r3, [pc, #396]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0b8      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d020      	beq.n	8004582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800454c:	4b59      	ldr	r3, [pc, #356]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a58      	ldr	r2, [pc, #352]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004564:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800456e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	494d      	ldr	r1, [pc, #308]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d040      	beq.n	8004610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d115      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e07f      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e073      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06b      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4936      	ldr	r1, [pc, #216]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd fdfe 	bl	80021e0 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fd fdfa 	bl	80021e0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e053      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d210      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 0207 	bic.w	r2, r3, #7
 8004626:	4922      	ldr	r1, [pc, #136]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e032      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4916      	ldr	r1, [pc, #88]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	490e      	ldr	r1, [pc, #56]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800467e:	f000 f821 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004682:	4602      	mov	r2, r0
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	490a      	ldr	r1, [pc, #40]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004690:	5ccb      	ldrb	r3, [r1, r3]
 8004692:	fa22 f303 	lsr.w	r3, r2, r3
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x1cc>)
 8004698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1d0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fd fd5c 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40022000 	.word	0x40022000
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08007128 	.word	0x08007128
 80046bc:	2000001c 	.word	0x2000001c
 80046c0:	20000024 	.word	0x20000024

080046c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_GetSysClockFreq+0x94>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d002      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x30>
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x36>
 80046f2:	e027      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_RCC_GetSysClockFreq+0x98>)
 80046f6:	613b      	str	r3, [r7, #16]
      break;
 80046f8:	e027      	b.n	800474a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0c9b      	lsrs	r3, r3, #18
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004704:	5cd3      	ldrb	r3, [r2, r3]
 8004706:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_GetSysClockFreq+0x94>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0c5b      	lsrs	r3, r3, #17
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <HAL_RCC_GetSysClockFreq+0xa0>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <HAL_RCC_GetSysClockFreq+0x98>)
 8004726:	fb03 f202 	mul.w	r2, r3, r2
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e004      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	613b      	str	r3, [r7, #16]
      break;
 8004742:	e002      	b.n	800474a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetSysClockFreq+0x98>)
 8004746:	613b      	str	r3, [r7, #16]
      break;
 8004748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800474a:	693b      	ldr	r3, [r7, #16]
}
 800474c:	4618      	mov	r0, r3
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	007a1200 	.word	0x007a1200
 8004760:	08007140 	.word	0x08007140
 8004764:	08007150 	.word	0x08007150
 8004768:	003d0900 	.word	0x003d0900

0800476c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <HAL_RCC_GetHCLKFreq+0x10>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	2000001c 	.word	0x2000001c

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004784:	f7ff fff2 	bl	800476c <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4903      	ldr	r1, [pc, #12]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08007138 	.word	0x08007138

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ac:	f7ff ffde 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08007138 	.word	0x08007138

080047d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <RCC_Delay+0x34>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <RCC_Delay+0x38>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0a5b      	lsrs	r3, r3, #9
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047ec:	bf00      	nop
  }
  while (Delay --);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e5a      	subs	r2, r3, #1
 80047f2:	60fa      	str	r2, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f9      	bne.n	80047ec <RCC_Delay+0x1c>
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	2000001c 	.word	0x2000001c
 8004808:	10624dd3 	.word	0x10624dd3

0800480c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e076      	b.n	800490c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d009      	beq.n	8004844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
 8004836:	e005      	b.n	8004844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd f9b6 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	ea42 0103 	orr.w	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	0c1a      	lsrs	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f002 0204 	and.w	r2, r2, #4
 80048ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Transmit+0x22>
 8004932:	2302      	movs	r3, #2
 8004934:	e12d      	b.n	8004b92 <HAL_SPI_Transmit+0x27e>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493e:	f7fd fc4f 	bl	80021e0 <HAL_GetTick>
 8004942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d002      	beq.n	800495a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004954:	2302      	movs	r3, #2
 8004956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004958:	e116      	b.n	8004b88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Transmit+0x52>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800496a:	e10d      	b.n	8004b88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2203      	movs	r2, #3
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b2:	d10f      	bne.n	80049d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d007      	beq.n	80049f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fa:	d14f      	bne.n	8004a9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Transmit+0xf6>
 8004a04:	8afb      	ldrh	r3, [r7, #22]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d142      	bne.n	8004a90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	881a      	ldrh	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a2e:	e02f      	b.n	8004a90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d112      	bne.n	8004a64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	881a      	ldrh	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	1c9a      	adds	r2, r3, #2
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a62:	e015      	b.n	8004a90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a64:	f7fd fbbc 	bl	80021e0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d803      	bhi.n	8004a7c <HAL_SPI_Transmit+0x168>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Transmit+0x16e>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a8e:	e07b      	b.n	8004b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ca      	bne.n	8004a30 <HAL_SPI_Transmit+0x11c>
 8004a9a:	e050      	b.n	8004b3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Transmit+0x196>
 8004aa4:	8afb      	ldrh	r3, [r7, #22]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d144      	bne.n	8004b34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ad0:	e030      	b.n	8004b34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d113      	bne.n	8004b08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b06:	e015      	b.n	8004b34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b08:	f7fd fb6a 	bl	80021e0 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d803      	bhi.n	8004b20 <HAL_SPI_Transmit+0x20c>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d102      	bne.n	8004b26 <HAL_SPI_Transmit+0x212>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b32:	e029      	b.n	8004b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1c9      	bne.n	8004ad2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fbcc 	bl	80052e0 <SPI_EndRxTxTransaction>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e003      	b.n	8004b88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	af02      	add	r7, sp, #8
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bbe:	e0fb      	b.n	8004db8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc8:	d112      	bne.n	8004bf0 <HAL_SPI_Receive+0x56>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8ef 	bl	8004dca <HAL_SPI_TransmitReceive>
 8004bec:	4603      	mov	r3, r0
 8004bee:	e0e8      	b.n	8004dc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Receive+0x64>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0e1      	b.n	8004dc2 <HAL_SPI_Receive+0x228>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c06:	f7fd faeb 	bl	80021e0 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_Receive+0x7e>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c1c:	e0cc      	b.n	8004db8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2204      	movs	r2, #4
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	d10f      	bne.n	8004c86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d16a      	bne.n	8004d82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cac:	e032      	b.n	8004d14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d115      	bne.n	8004ce8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f103 020c 	add.w	r2, r3, #12
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce6:	e015      	b.n	8004d14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce8:	f7fd fa7a 	bl	80021e0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d803      	bhi.n	8004d00 <HAL_SPI_Receive+0x166>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d102      	bne.n	8004d06 <HAL_SPI_Receive+0x16c>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d12:	e051      	b.n	8004db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1c7      	bne.n	8004cae <HAL_SPI_Receive+0x114>
 8004d1e:	e035      	b.n	8004d8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d113      	bne.n	8004d56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e015      	b.n	8004d82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d56:	f7fd fa43 	bl	80021e0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d803      	bhi.n	8004d6e <HAL_SPI_Receive+0x1d4>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x1da>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d80:	e01a      	b.n	8004db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1c9      	bne.n	8004d20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fa53 	bl	800523c <SPI_EndRxTransaction>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
 8004dae:	e003      	b.n	8004db8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08c      	sub	sp, #48	; 0x30
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x26>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e198      	b.n	8005122 <HAL_SPI_TransmitReceive+0x358>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df8:	f7fd f9f2 	bl	80021e0 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d00f      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x70>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e20:	d107      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x68>
 8004e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d003      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
 8004e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e38:	e16d      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x82>
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e52:	e160      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d003      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2205      	movs	r2, #5
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	887a      	ldrh	r2, [r7, #2]
 8004e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	887a      	ldrh	r2, [r7, #2]
 8004e8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d007      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec4:	d17c      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x10a>
 8004ece:	8b7b      	ldrh	r3, [r7, #26]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d16a      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef8:	e057      	b.n	8004faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d11b      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x176>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x176>
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d113      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	881a      	ldrh	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d119      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x1b8>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d014      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	b292      	uxth	r2, r2
 8004f64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f82:	f7fd f92d 	bl	80021e0 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d80b      	bhi.n	8004faa <HAL_SPI_TransmitReceive+0x1e0>
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d007      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004fa8:	e0b5      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1a2      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x130>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d19d      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x130>
 8004fbe:	e080      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x204>
 8004fc8:	8b7b      	ldrh	r3, [r7, #26]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d16f      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff4:	e05b      	b.n	80050ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d11c      	bne.n	800503e <HAL_SPI_TransmitReceive+0x274>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d017      	beq.n	800503e <HAL_SPI_TransmitReceive+0x274>
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d114      	bne.n	800503e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d119      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x2b6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d014      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800507c:	2301      	movs	r3, #1
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005080:	f7fd f8ae 	bl	80021e0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508c:	429a      	cmp	r2, r3
 800508e:	d803      	bhi.n	8005098 <HAL_SPI_TransmitReceive+0x2ce>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d102      	bne.n	800509e <HAL_SPI_TransmitReceive+0x2d4>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80050ac:	e033      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d19e      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x22c>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d199      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f90a 	bl	80052e0 <SPI_EndRxTxTransaction>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050de:	e01a      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510c:	e003      	b.n	8005116 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800511e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005122:	4618      	mov	r0, r3
 8005124:	3730      	adds	r7, #48	; 0x30
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800513c:	f7fd f850 	bl	80021e0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	4413      	add	r3, r2
 800514a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800514c:	f7fd f848 	bl	80021e0 <HAL_GetTick>
 8005150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005152:	4b39      	ldr	r3, [pc, #228]	; (8005238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	015b      	lsls	r3, r3, #5
 8005158:	0d1b      	lsrs	r3, r3, #20
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005162:	e054      	b.n	800520e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d050      	beq.n	800520e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800516c:	f7fd f838 	bl	80021e0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	429a      	cmp	r2, r3
 800517a:	d902      	bls.n	8005182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d13d      	bne.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519a:	d111      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d004      	beq.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ae:	d107      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c8:	d10f      	bne.n	80051ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e017      	b.n	800522e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3b01      	subs	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	429a      	cmp	r2, r3
 800522a:	d19b      	bne.n	8005164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2000001c 	.word	0x2000001c

0800523c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005250:	d111      	bne.n	8005276 <SPI_EndRxTransaction+0x3a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525a:	d004      	beq.n	8005266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d107      	bne.n	8005276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005274:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d117      	bne.n	80052b0 <SPI_EndRxTransaction+0x74>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	d112      	bne.n	80052b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2200      	movs	r2, #0
 8005292:	2101      	movs	r1, #1
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ff49 	bl	800512c <SPI_WaitFlagStateUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01a      	beq.n	80052d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e013      	b.n	80052d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff ff36 	bl	800512c <SPI_WaitFlagStateUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e000      	b.n	80052d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff ff18 	bl	800512c <SPI_WaitFlagStateUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e000      	b.n	8005314 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e042      	b.n	80053b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fc8e 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fdc5 	bl	8005ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d16d      	bne.n	80054b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_UART_Transmit+0x2c>
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e066      	b.n	80054ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2221      	movs	r2, #33	; 0x21
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053fa:	f7fc fef1 	bl	80021e0 <HAL_GetTick>
 80053fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	88fa      	ldrh	r2, [r7, #6]
 800540a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d108      	bne.n	8005428 <HAL_UART_Transmit+0x6c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e003      	b.n	8005430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005430:	e02a      	b.n	8005488 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fb14 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e036      	b.n	80054ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10b      	bne.n	800546a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	3302      	adds	r3, #2
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	e007      	b.n	800547a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	3301      	adds	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1cf      	bne.n	8005432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	2140      	movs	r1, #64	; 0x40
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fae4 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	4613      	mov	r3, r2
 80054ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d112      	bne.n	8005502 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_Receive_IT+0x26>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e00b      	b.n	8005504 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	461a      	mov	r2, r3
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fb24 	bl	8005b46 <UART_Start_Receive_IT>
 80054fe:	4603      	mov	r3, r0
 8005500:	e000      	b.n	8005504 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0ba      	sub	sp, #232	; 0xe8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005538:	2300      	movs	r3, #0
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800554a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_UART_IRQHandler+0x66>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc01 	bl	8005d72 <UART_Receive_IT>
      return;
 8005570:	e25b      	b.n	8005a2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80de 	beq.w	8005738 <HAL_UART_IRQHandler+0x22c>
 800557c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80d1 	beq.w	8005738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0xae>
 80055a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f043 0201 	orr.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xd2>
 80055c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f043 0202 	orr.w	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xf6>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <HAL_UART_IRQHandler+0x126>
 800560e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800561a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 81f2 	beq.w	8005a20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_UART_IRQHandler+0x14e>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fb8c 	bl	8005d72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_UART_IRQHandler+0x17a>
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04f      	beq.n	8005726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa96 	bl	8005bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d041      	beq.n	800571e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1d9      	bne.n	800569a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d013      	beq.n	8005716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	4a7e      	ldr	r2, [pc, #504]	; (80058ec <HAL_UART_IRQHandler+0x3e0>)
 80056f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc fee6 	bl	80024cc <HAL_DMA_Abort_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e00e      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f993 	bl	8005a42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	e00a      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f98f 	bl	8005a42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e006      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f98b 	bl	8005a42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005732:	e175      	b.n	8005a20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	bf00      	nop
    return;
 8005736:	e173      	b.n	8005a20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 814f 	bne.w	80059e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8148 	beq.w	80059e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8141 	beq.w	80059e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 80b6 	beq.w	80058f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8145 	beq.w	8005a24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800579e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f080 813e 	bcs.w	8005a24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	f000 8088 	beq.w	80058cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1d9      	bne.n	80057bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3314      	adds	r3, #20
 800580e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800582c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005830:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005834:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800583e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e1      	bne.n	8005808 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005868:	66fa      	str	r2, [r7, #108]	; 0x6c
 800586a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800586e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e3      	bne.n	8005844 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800589a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589c:	f023 0310 	bic.w	r3, r3, #16
 80058a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80058b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e3      	bne.n	800588a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fc fdc5 	bl	8002456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8b6 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e8:	e09c      	b.n	8005a24 <HAL_UART_IRQHandler+0x518>
 80058ea:	bf00      	nop
 80058ec:	08005c7d 	.word	0x08005c7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 808e 	beq.w	8005a28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800590c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8089 	beq.w	8005a28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800593a:	647a      	str	r2, [r7, #68]	; 0x44
 800593c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	623b      	str	r3, [r7, #32]
   return(result);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005972:	633a      	str	r2, [r7, #48]	; 0x30
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059b8:	61fa      	str	r2, [r7, #28]
 80059ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	617b      	str	r3, [r7, #20]
   return(result);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e3      	bne.n	8005994 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f83b 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059de:	e023      	b.n	8005a28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <HAL_UART_IRQHandler+0x4f4>
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f953 	bl	8005ca4 <UART_Transmit_IT>
    return;
 80059fe:	e014      	b.n	8005a2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <HAL_UART_IRQHandler+0x51e>
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f992 	bl	8005d42 <UART_EndTransmit_IT>
    return;
 8005a1e:	e004      	b.n	8005a2a <HAL_UART_IRQHandler+0x51e>
    return;
 8005a20:	bf00      	nop
 8005a22:	e002      	b.n	8005a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a24:	bf00      	nop
 8005a26:	e000      	b.n	8005a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a28:	bf00      	nop
  }
}
 8005a2a:	37e8      	adds	r7, #232	; 0xe8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr

08005a42 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b090      	sub	sp, #64	; 0x40
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	e050      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d04c      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8a:	f7fc fba9 	bl	80021e0 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d241      	bcs.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aba:	637a      	str	r2, [r7, #52]	; 0x34
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e5      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aee:	623a      	str	r2, [r7, #32]
 8005af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e00f      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d09f      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3740      	adds	r7, #64	; 0x40
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2222      	movs	r2, #34	; 0x22
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0220 	orr.w	r2, r2, #32
 8005baa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b095      	sub	sp, #84	; 0x54
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005be0:	643a      	str	r2, [r7, #64]	; 0x40
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3314      	adds	r3, #20
 8005bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d119      	bne.n	8005c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	647b      	str	r3, [r7, #68]	; 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c50:	61ba      	str	r2, [r7, #24]
 8005c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6979      	ldr	r1, [r7, #20]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c72:	bf00      	nop
 8005c74:	3754      	adds	r7, #84	; 0x54
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fed3 	bl	8005a42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b21      	cmp	r3, #33	; 0x21
 8005cb6:	d13e      	bne.n	8005d36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d114      	bne.n	8005cec <UART_Transmit_IT+0x48>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d110      	bne.n	8005cec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]
 8005cea:	e008      	b.n	8005cfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	1c59      	adds	r1, r3, #1
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6211      	str	r1, [r2, #32]
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10f      	bne.n	8005d32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fe64 	bl	8005a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b08c      	sub	sp, #48	; 0x30
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b22      	cmp	r3, #34	; 0x22
 8005d84:	f040 80ae 	bne.w	8005ee4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d90:	d117      	bne.n	8005dc2 <UART_Receive_IT+0x50>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d113      	bne.n	8005dc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	1c9a      	adds	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005dc0:	e026      	b.n	8005e10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd4:	d007      	beq.n	8005de6 <UART_Receive_IT+0x74>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <UART_Receive_IT+0x82>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e008      	b.n	8005e06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d15d      	bne.n	8005ee0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0220 	bic.w	r2, r2, #32
 8005e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d135      	bne.n	8005ed6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 0310 	bic.w	r3, r3, #16
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	623a      	str	r2, [r7, #32]
 8005e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e5      	bne.n	8005e70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d10a      	bne.n	8005ec8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fdc0 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
 8005ed4:	e002      	b.n	8005edc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fb fd22 	bl	8001920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e002      	b.n	8005ee6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f2a:	f023 030c 	bic.w	r3, r3, #12
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2c      	ldr	r2, [pc, #176]	; (8006004 <UART_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe fc26 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	e002      	b.n	8005f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe fc0e 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <UART_SetConfig+0x118>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	0119      	lsls	r1, r3, #4
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <UART_SetConfig+0x118>)
 8005f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2064      	movs	r0, #100	; 0x64
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <UART_SetConfig+0x118>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbc:	4419      	add	r1, r3
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009a      	lsls	r2, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <UART_SetConfig+0x118>)
 8005fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	fb00 f303 	mul.w	r3, r0, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	3332      	adds	r3, #50	; 0x32
 8005fe8:	4a07      	ldr	r2, [pc, #28]	; (8006008 <UART_SetConfig+0x118>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40013800 	.word	0x40013800
 8006008:	51eb851f 	.word	0x51eb851f

0800600c <siprintf>:
 800600c:	b40e      	push	{r1, r2, r3}
 800600e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006012:	b500      	push	{lr}
 8006014:	b09c      	sub	sp, #112	; 0x70
 8006016:	ab1d      	add	r3, sp, #116	; 0x74
 8006018:	9002      	str	r0, [sp, #8]
 800601a:	9006      	str	r0, [sp, #24]
 800601c:	9107      	str	r1, [sp, #28]
 800601e:	9104      	str	r1, [sp, #16]
 8006020:	4808      	ldr	r0, [pc, #32]	; (8006044 <siprintf+0x38>)
 8006022:	4909      	ldr	r1, [pc, #36]	; (8006048 <siprintf+0x3c>)
 8006024:	f853 2b04 	ldr.w	r2, [r3], #4
 8006028:	9105      	str	r1, [sp, #20]
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	a902      	add	r1, sp, #8
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	f000 f9be 	bl	80063b0 <_svfiprintf_r>
 8006034:	2200      	movs	r2, #0
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	b01c      	add	sp, #112	; 0x70
 800603c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006040:	b003      	add	sp, #12
 8006042:	4770      	bx	lr
 8006044:	20000078 	.word	0x20000078
 8006048:	ffff0208 	.word	0xffff0208

0800604c <memcmp>:
 800604c:	b510      	push	{r4, lr}
 800604e:	3901      	subs	r1, #1
 8006050:	4402      	add	r2, r0
 8006052:	4290      	cmp	r0, r2
 8006054:	d101      	bne.n	800605a <memcmp+0xe>
 8006056:	2000      	movs	r0, #0
 8006058:	e005      	b.n	8006066 <memcmp+0x1a>
 800605a:	7803      	ldrb	r3, [r0, #0]
 800605c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006060:	42a3      	cmp	r3, r4
 8006062:	d001      	beq.n	8006068 <memcmp+0x1c>
 8006064:	1b18      	subs	r0, r3, r4
 8006066:	bd10      	pop	{r4, pc}
 8006068:	3001      	adds	r0, #1
 800606a:	e7f2      	b.n	8006052 <memcmp+0x6>

0800606c <memset>:
 800606c:	4603      	mov	r3, r0
 800606e:	4402      	add	r2, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <strncmp>:
 800607c:	b510      	push	{r4, lr}
 800607e:	b16a      	cbz	r2, 800609c <strncmp+0x20>
 8006080:	3901      	subs	r1, #1
 8006082:	1884      	adds	r4, r0, r2
 8006084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006088:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800608c:	429a      	cmp	r2, r3
 800608e:	d103      	bne.n	8006098 <strncmp+0x1c>
 8006090:	42a0      	cmp	r0, r4
 8006092:	d001      	beq.n	8006098 <strncmp+0x1c>
 8006094:	2a00      	cmp	r2, #0
 8006096:	d1f5      	bne.n	8006084 <strncmp+0x8>
 8006098:	1ad0      	subs	r0, r2, r3
 800609a:	bd10      	pop	{r4, pc}
 800609c:	4610      	mov	r0, r2
 800609e:	e7fc      	b.n	800609a <strncmp+0x1e>

080060a0 <__errno>:
 80060a0:	4b01      	ldr	r3, [pc, #4]	; (80060a8 <__errno+0x8>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000078 	.word	0x20000078

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	2600      	movs	r6, #0
 80060b0:	4d0c      	ldr	r5, [pc, #48]	; (80060e4 <__libc_init_array+0x38>)
 80060b2:	4c0d      	ldr	r4, [pc, #52]	; (80060e8 <__libc_init_array+0x3c>)
 80060b4:	1b64      	subs	r4, r4, r5
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	42a6      	cmp	r6, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	f000 fc7a 	bl	80069b4 <_init>
 80060c0:	2600      	movs	r6, #0
 80060c2:	4d0a      	ldr	r5, [pc, #40]	; (80060ec <__libc_init_array+0x40>)
 80060c4:	4c0a      	ldr	r4, [pc, #40]	; (80060f0 <__libc_init_array+0x44>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	42a6      	cmp	r6, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d4:	4798      	blx	r3
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	f855 3b04 	ldr.w	r3, [r5], #4
 80060de:	4798      	blx	r3
 80060e0:	3601      	adds	r6, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	08007188 	.word	0x08007188
 80060e8:	08007188 	.word	0x08007188
 80060ec:	08007188 	.word	0x08007188
 80060f0:	0800718c 	.word	0x0800718c

080060f4 <__retarget_lock_acquire_recursive>:
 80060f4:	4770      	bx	lr

080060f6 <__retarget_lock_release_recursive>:
 80060f6:	4770      	bx	lr

080060f8 <memcpy>:
 80060f8:	440a      	add	r2, r1
 80060fa:	4291      	cmp	r1, r2
 80060fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006100:	d100      	bne.n	8006104 <memcpy+0xc>
 8006102:	4770      	bx	lr
 8006104:	b510      	push	{r4, lr}
 8006106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800610a:	4291      	cmp	r1, r2
 800610c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006110:	d1f9      	bne.n	8006106 <memcpy+0xe>
 8006112:	bd10      	pop	{r4, pc}

08006114 <_free_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4605      	mov	r5, r0
 8006118:	2900      	cmp	r1, #0
 800611a:	d040      	beq.n	800619e <_free_r+0x8a>
 800611c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006120:	1f0c      	subs	r4, r1, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfb8      	it	lt
 8006126:	18e4      	addlt	r4, r4, r3
 8006128:	f000 f8dc 	bl	80062e4 <__malloc_lock>
 800612c:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <_free_r+0x8c>)
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	b933      	cbnz	r3, 8006140 <_free_r+0x2c>
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	6014      	str	r4, [r2, #0]
 8006136:	4628      	mov	r0, r5
 8006138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613c:	f000 b8d8 	b.w	80062f0 <__malloc_unlock>
 8006140:	42a3      	cmp	r3, r4
 8006142:	d908      	bls.n	8006156 <_free_r+0x42>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	1821      	adds	r1, r4, r0
 8006148:	428b      	cmp	r3, r1
 800614a:	bf01      	itttt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	1809      	addeq	r1, r1, r0
 8006152:	6021      	streq	r1, [r4, #0]
 8006154:	e7ed      	b.n	8006132 <_free_r+0x1e>
 8006156:	461a      	mov	r2, r3
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b10b      	cbz	r3, 8006160 <_free_r+0x4c>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d9fa      	bls.n	8006156 <_free_r+0x42>
 8006160:	6811      	ldr	r1, [r2, #0]
 8006162:	1850      	adds	r0, r2, r1
 8006164:	42a0      	cmp	r0, r4
 8006166:	d10b      	bne.n	8006180 <_free_r+0x6c>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	4401      	add	r1, r0
 800616c:	1850      	adds	r0, r2, r1
 800616e:	4283      	cmp	r3, r0
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	d1e0      	bne.n	8006136 <_free_r+0x22>
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4408      	add	r0, r1
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	e7da      	b.n	8006136 <_free_r+0x22>
 8006180:	d902      	bls.n	8006188 <_free_r+0x74>
 8006182:	230c      	movs	r3, #12
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	e7d6      	b.n	8006136 <_free_r+0x22>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	1821      	adds	r1, r4, r0
 800618c:	428b      	cmp	r3, r1
 800618e:	bf01      	itttt	eq
 8006190:	6819      	ldreq	r1, [r3, #0]
 8006192:	685b      	ldreq	r3, [r3, #4]
 8006194:	1809      	addeq	r1, r1, r0
 8006196:	6021      	streq	r1, [r4, #0]
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	6054      	str	r4, [r2, #4]
 800619c:	e7cb      	b.n	8006136 <_free_r+0x22>
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	200003e8 	.word	0x200003e8

080061a4 <sbrk_aligned>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4e0e      	ldr	r6, [pc, #56]	; (80061e0 <sbrk_aligned+0x3c>)
 80061a8:	460c      	mov	r4, r1
 80061aa:	6831      	ldr	r1, [r6, #0]
 80061ac:	4605      	mov	r5, r0
 80061ae:	b911      	cbnz	r1, 80061b6 <sbrk_aligned+0x12>
 80061b0:	f000 fbaa 	bl	8006908 <_sbrk_r>
 80061b4:	6030      	str	r0, [r6, #0]
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f000 fba5 	bl	8006908 <_sbrk_r>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d00a      	beq.n	80061d8 <sbrk_aligned+0x34>
 80061c2:	1cc4      	adds	r4, r0, #3
 80061c4:	f024 0403 	bic.w	r4, r4, #3
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d007      	beq.n	80061dc <sbrk_aligned+0x38>
 80061cc:	1a21      	subs	r1, r4, r0
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fb9a 	bl	8006908 <_sbrk_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	d101      	bne.n	80061dc <sbrk_aligned+0x38>
 80061d8:	f04f 34ff 	mov.w	r4, #4294967295
 80061dc:	4620      	mov	r0, r4
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	200003ec 	.word	0x200003ec

080061e4 <_malloc_r>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	1ccd      	adds	r5, r1, #3
 80061ea:	f025 0503 	bic.w	r5, r5, #3
 80061ee:	3508      	adds	r5, #8
 80061f0:	2d0c      	cmp	r5, #12
 80061f2:	bf38      	it	cc
 80061f4:	250c      	movcc	r5, #12
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	4607      	mov	r7, r0
 80061fa:	db01      	blt.n	8006200 <_malloc_r+0x1c>
 80061fc:	42a9      	cmp	r1, r5
 80061fe:	d905      	bls.n	800620c <_malloc_r+0x28>
 8006200:	230c      	movs	r3, #12
 8006202:	2600      	movs	r6, #0
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4630      	mov	r0, r6
 8006208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062e0 <_malloc_r+0xfc>
 8006210:	f000 f868 	bl	80062e4 <__malloc_lock>
 8006214:	f8d8 3000 	ldr.w	r3, [r8]
 8006218:	461c      	mov	r4, r3
 800621a:	bb5c      	cbnz	r4, 8006274 <_malloc_r+0x90>
 800621c:	4629      	mov	r1, r5
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff ffc0 	bl	80061a4 <sbrk_aligned>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	4604      	mov	r4, r0
 8006228:	d155      	bne.n	80062d6 <_malloc_r+0xf2>
 800622a:	f8d8 4000 	ldr.w	r4, [r8]
 800622e:	4626      	mov	r6, r4
 8006230:	2e00      	cmp	r6, #0
 8006232:	d145      	bne.n	80062c0 <_malloc_r+0xdc>
 8006234:	2c00      	cmp	r4, #0
 8006236:	d048      	beq.n	80062ca <_malloc_r+0xe6>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	4631      	mov	r1, r6
 800623c:	4638      	mov	r0, r7
 800623e:	eb04 0903 	add.w	r9, r4, r3
 8006242:	f000 fb61 	bl	8006908 <_sbrk_r>
 8006246:	4581      	cmp	r9, r0
 8006248:	d13f      	bne.n	80062ca <_malloc_r+0xe6>
 800624a:	6821      	ldr	r1, [r4, #0]
 800624c:	4638      	mov	r0, r7
 800624e:	1a6d      	subs	r5, r5, r1
 8006250:	4629      	mov	r1, r5
 8006252:	f7ff ffa7 	bl	80061a4 <sbrk_aligned>
 8006256:	3001      	adds	r0, #1
 8006258:	d037      	beq.n	80062ca <_malloc_r+0xe6>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	442b      	add	r3, r5
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	f8d8 3000 	ldr.w	r3, [r8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d038      	beq.n	80062da <_malloc_r+0xf6>
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	42a2      	cmp	r2, r4
 800626c:	d12b      	bne.n	80062c6 <_malloc_r+0xe2>
 800626e:	2200      	movs	r2, #0
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	e00f      	b.n	8006294 <_malloc_r+0xb0>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	1b52      	subs	r2, r2, r5
 8006278:	d41f      	bmi.n	80062ba <_malloc_r+0xd6>
 800627a:	2a0b      	cmp	r2, #11
 800627c:	d917      	bls.n	80062ae <_malloc_r+0xca>
 800627e:	1961      	adds	r1, r4, r5
 8006280:	42a3      	cmp	r3, r4
 8006282:	6025      	str	r5, [r4, #0]
 8006284:	bf18      	it	ne
 8006286:	6059      	strne	r1, [r3, #4]
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	bf08      	it	eq
 800628c:	f8c8 1000 	streq.w	r1, [r8]
 8006290:	5162      	str	r2, [r4, r5]
 8006292:	604b      	str	r3, [r1, #4]
 8006294:	4638      	mov	r0, r7
 8006296:	f104 060b 	add.w	r6, r4, #11
 800629a:	f000 f829 	bl	80062f0 <__malloc_unlock>
 800629e:	f026 0607 	bic.w	r6, r6, #7
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	1af2      	subs	r2, r6, r3
 80062a6:	d0ae      	beq.n	8006206 <_malloc_r+0x22>
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	50a3      	str	r3, [r4, r2]
 80062ac:	e7ab      	b.n	8006206 <_malloc_r+0x22>
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	6862      	ldr	r2, [r4, #4]
 80062b2:	d1dd      	bne.n	8006270 <_malloc_r+0x8c>
 80062b4:	f8c8 2000 	str.w	r2, [r8]
 80062b8:	e7ec      	b.n	8006294 <_malloc_r+0xb0>
 80062ba:	4623      	mov	r3, r4
 80062bc:	6864      	ldr	r4, [r4, #4]
 80062be:	e7ac      	b.n	800621a <_malloc_r+0x36>
 80062c0:	4634      	mov	r4, r6
 80062c2:	6876      	ldr	r6, [r6, #4]
 80062c4:	e7b4      	b.n	8006230 <_malloc_r+0x4c>
 80062c6:	4613      	mov	r3, r2
 80062c8:	e7cc      	b.n	8006264 <_malloc_r+0x80>
 80062ca:	230c      	movs	r3, #12
 80062cc:	4638      	mov	r0, r7
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	f000 f80e 	bl	80062f0 <__malloc_unlock>
 80062d4:	e797      	b.n	8006206 <_malloc_r+0x22>
 80062d6:	6025      	str	r5, [r4, #0]
 80062d8:	e7dc      	b.n	8006294 <_malloc_r+0xb0>
 80062da:	605b      	str	r3, [r3, #4]
 80062dc:	deff      	udf	#255	; 0xff
 80062de:	bf00      	nop
 80062e0:	200003e8 	.word	0x200003e8

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_lock+0x8>)
 80062e6:	f7ff bf05 	b.w	80060f4 <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	200003e4 	.word	0x200003e4

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f7ff bf00 	b.w	80060f6 <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	200003e4 	.word	0x200003e4

080062fc <__ssputs_r>:
 80062fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006300:	461f      	mov	r7, r3
 8006302:	688e      	ldr	r6, [r1, #8]
 8006304:	4682      	mov	sl, r0
 8006306:	42be      	cmp	r6, r7
 8006308:	460c      	mov	r4, r1
 800630a:	4690      	mov	r8, r2
 800630c:	680b      	ldr	r3, [r1, #0]
 800630e:	d82c      	bhi.n	800636a <__ssputs_r+0x6e>
 8006310:	898a      	ldrh	r2, [r1, #12]
 8006312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006316:	d026      	beq.n	8006366 <__ssputs_r+0x6a>
 8006318:	6965      	ldr	r5, [r4, #20]
 800631a:	6909      	ldr	r1, [r1, #16]
 800631c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006320:	eba3 0901 	sub.w	r9, r3, r1
 8006324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006328:	1c7b      	adds	r3, r7, #1
 800632a:	444b      	add	r3, r9
 800632c:	106d      	asrs	r5, r5, #1
 800632e:	429d      	cmp	r5, r3
 8006330:	bf38      	it	cc
 8006332:	461d      	movcc	r5, r3
 8006334:	0553      	lsls	r3, r2, #21
 8006336:	d527      	bpl.n	8006388 <__ssputs_r+0x8c>
 8006338:	4629      	mov	r1, r5
 800633a:	f7ff ff53 	bl	80061e4 <_malloc_r>
 800633e:	4606      	mov	r6, r0
 8006340:	b360      	cbz	r0, 800639c <__ssputs_r+0xa0>
 8006342:	464a      	mov	r2, r9
 8006344:	6921      	ldr	r1, [r4, #16]
 8006346:	f7ff fed7 	bl	80060f8 <memcpy>
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	6126      	str	r6, [r4, #16]
 8006358:	444e      	add	r6, r9
 800635a:	6026      	str	r6, [r4, #0]
 800635c:	463e      	mov	r6, r7
 800635e:	6165      	str	r5, [r4, #20]
 8006360:	eba5 0509 	sub.w	r5, r5, r9
 8006364:	60a5      	str	r5, [r4, #8]
 8006366:	42be      	cmp	r6, r7
 8006368:	d900      	bls.n	800636c <__ssputs_r+0x70>
 800636a:	463e      	mov	r6, r7
 800636c:	4632      	mov	r2, r6
 800636e:	4641      	mov	r1, r8
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	f000 faaf 	bl	80068d4 <memmove>
 8006376:	2000      	movs	r0, #0
 8006378:	68a3      	ldr	r3, [r4, #8]
 800637a:	1b9b      	subs	r3, r3, r6
 800637c:	60a3      	str	r3, [r4, #8]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4433      	add	r3, r6
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	462a      	mov	r2, r5
 800638a:	f000 fadb 	bl	8006944 <_realloc_r>
 800638e:	4606      	mov	r6, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	d1e0      	bne.n	8006356 <__ssputs_r+0x5a>
 8006394:	4650      	mov	r0, sl
 8006396:	6921      	ldr	r1, [r4, #16]
 8006398:	f7ff febc 	bl	8006114 <_free_r>
 800639c:	230c      	movs	r3, #12
 800639e:	f8ca 3000 	str.w	r3, [sl]
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	e7e9      	b.n	8006384 <__ssputs_r+0x88>

080063b0 <_svfiprintf_r>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	4698      	mov	r8, r3
 80063b6:	898b      	ldrh	r3, [r1, #12]
 80063b8:	4607      	mov	r7, r0
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	460d      	mov	r5, r1
 80063be:	4614      	mov	r4, r2
 80063c0:	b09d      	sub	sp, #116	; 0x74
 80063c2:	d50e      	bpl.n	80063e2 <_svfiprintf_r+0x32>
 80063c4:	690b      	ldr	r3, [r1, #16]
 80063c6:	b963      	cbnz	r3, 80063e2 <_svfiprintf_r+0x32>
 80063c8:	2140      	movs	r1, #64	; 0x40
 80063ca:	f7ff ff0b 	bl	80061e4 <_malloc_r>
 80063ce:	6028      	str	r0, [r5, #0]
 80063d0:	6128      	str	r0, [r5, #16]
 80063d2:	b920      	cbnz	r0, 80063de <_svfiprintf_r+0x2e>
 80063d4:	230c      	movs	r3, #12
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	e0d0      	b.n	8006580 <_svfiprintf_r+0x1d0>
 80063de:	2340      	movs	r3, #64	; 0x40
 80063e0:	616b      	str	r3, [r5, #20]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9309      	str	r3, [sp, #36]	; 0x24
 80063e6:	2320      	movs	r3, #32
 80063e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ec:	2330      	movs	r3, #48	; 0x30
 80063ee:	f04f 0901 	mov.w	r9, #1
 80063f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006598 <_svfiprintf_r+0x1e8>
 80063fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063fe:	4623      	mov	r3, r4
 8006400:	469a      	mov	sl, r3
 8006402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006406:	b10a      	cbz	r2, 800640c <_svfiprintf_r+0x5c>
 8006408:	2a25      	cmp	r2, #37	; 0x25
 800640a:	d1f9      	bne.n	8006400 <_svfiprintf_r+0x50>
 800640c:	ebba 0b04 	subs.w	fp, sl, r4
 8006410:	d00b      	beq.n	800642a <_svfiprintf_r+0x7a>
 8006412:	465b      	mov	r3, fp
 8006414:	4622      	mov	r2, r4
 8006416:	4629      	mov	r1, r5
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ff6f 	bl	80062fc <__ssputs_r>
 800641e:	3001      	adds	r0, #1
 8006420:	f000 80a9 	beq.w	8006576 <_svfiprintf_r+0x1c6>
 8006424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006426:	445a      	add	r2, fp
 8006428:	9209      	str	r2, [sp, #36]	; 0x24
 800642a:	f89a 3000 	ldrb.w	r3, [sl]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80a1 	beq.w	8006576 <_svfiprintf_r+0x1c6>
 8006434:	2300      	movs	r3, #0
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800643e:	f10a 0a01 	add.w	sl, sl, #1
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	9307      	str	r3, [sp, #28]
 8006446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800644a:	931a      	str	r3, [sp, #104]	; 0x68
 800644c:	4654      	mov	r4, sl
 800644e:	2205      	movs	r2, #5
 8006450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006454:	4850      	ldr	r0, [pc, #320]	; (8006598 <_svfiprintf_r+0x1e8>)
 8006456:	f000 fa67 	bl	8006928 <memchr>
 800645a:	9a04      	ldr	r2, [sp, #16]
 800645c:	b9d8      	cbnz	r0, 8006496 <_svfiprintf_r+0xe6>
 800645e:	06d0      	lsls	r0, r2, #27
 8006460:	bf44      	itt	mi
 8006462:	2320      	movmi	r3, #32
 8006464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006468:	0711      	lsls	r1, r2, #28
 800646a:	bf44      	itt	mi
 800646c:	232b      	movmi	r3, #43	; 0x2b
 800646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006472:	f89a 3000 	ldrb.w	r3, [sl]
 8006476:	2b2a      	cmp	r3, #42	; 0x2a
 8006478:	d015      	beq.n	80064a6 <_svfiprintf_r+0xf6>
 800647a:	4654      	mov	r4, sl
 800647c:	2000      	movs	r0, #0
 800647e:	f04f 0c0a 	mov.w	ip, #10
 8006482:	9a07      	ldr	r2, [sp, #28]
 8006484:	4621      	mov	r1, r4
 8006486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648a:	3b30      	subs	r3, #48	; 0x30
 800648c:	2b09      	cmp	r3, #9
 800648e:	d94d      	bls.n	800652c <_svfiprintf_r+0x17c>
 8006490:	b1b0      	cbz	r0, 80064c0 <_svfiprintf_r+0x110>
 8006492:	9207      	str	r2, [sp, #28]
 8006494:	e014      	b.n	80064c0 <_svfiprintf_r+0x110>
 8006496:	eba0 0308 	sub.w	r3, r0, r8
 800649a:	fa09 f303 	lsl.w	r3, r9, r3
 800649e:	4313      	orrs	r3, r2
 80064a0:	46a2      	mov	sl, r4
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	e7d2      	b.n	800644c <_svfiprintf_r+0x9c>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	1d19      	adds	r1, r3, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	9103      	str	r1, [sp, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfbb      	ittet	lt
 80064b2:	425b      	neglt	r3, r3
 80064b4:	f042 0202 	orrlt.w	r2, r2, #2
 80064b8:	9307      	strge	r3, [sp, #28]
 80064ba:	9307      	strlt	r3, [sp, #28]
 80064bc:	bfb8      	it	lt
 80064be:	9204      	strlt	r2, [sp, #16]
 80064c0:	7823      	ldrb	r3, [r4, #0]
 80064c2:	2b2e      	cmp	r3, #46	; 0x2e
 80064c4:	d10c      	bne.n	80064e0 <_svfiprintf_r+0x130>
 80064c6:	7863      	ldrb	r3, [r4, #1]
 80064c8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ca:	d134      	bne.n	8006536 <_svfiprintf_r+0x186>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	3402      	adds	r4, #2
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	9203      	str	r2, [sp, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	f04f 33ff 	movlt.w	r3, #4294967295
 80064de:	9305      	str	r3, [sp, #20]
 80064e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800659c <_svfiprintf_r+0x1ec>
 80064e4:	2203      	movs	r2, #3
 80064e6:	4650      	mov	r0, sl
 80064e8:	7821      	ldrb	r1, [r4, #0]
 80064ea:	f000 fa1d 	bl	8006928 <memchr>
 80064ee:	b138      	cbz	r0, 8006500 <_svfiprintf_r+0x150>
 80064f0:	2240      	movs	r2, #64	; 0x40
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	eba0 000a 	sub.w	r0, r0, sl
 80064f8:	4082      	lsls	r2, r0
 80064fa:	4313      	orrs	r3, r2
 80064fc:	3401      	adds	r4, #1
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006504:	2206      	movs	r2, #6
 8006506:	4826      	ldr	r0, [pc, #152]	; (80065a0 <_svfiprintf_r+0x1f0>)
 8006508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800650c:	f000 fa0c 	bl	8006928 <memchr>
 8006510:	2800      	cmp	r0, #0
 8006512:	d038      	beq.n	8006586 <_svfiprintf_r+0x1d6>
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <_svfiprintf_r+0x1f4>)
 8006516:	bb1b      	cbnz	r3, 8006560 <_svfiprintf_r+0x1b0>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	3307      	adds	r3, #7
 800651c:	f023 0307 	bic.w	r3, r3, #7
 8006520:	3308      	adds	r3, #8
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006526:	4433      	add	r3, r6
 8006528:	9309      	str	r3, [sp, #36]	; 0x24
 800652a:	e768      	b.n	80063fe <_svfiprintf_r+0x4e>
 800652c:	460c      	mov	r4, r1
 800652e:	2001      	movs	r0, #1
 8006530:	fb0c 3202 	mla	r2, ip, r2, r3
 8006534:	e7a6      	b.n	8006484 <_svfiprintf_r+0xd4>
 8006536:	2300      	movs	r3, #0
 8006538:	f04f 0c0a 	mov.w	ip, #10
 800653c:	4619      	mov	r1, r3
 800653e:	3401      	adds	r4, #1
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	4620      	mov	r0, r4
 8006544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006548:	3a30      	subs	r2, #48	; 0x30
 800654a:	2a09      	cmp	r2, #9
 800654c:	d903      	bls.n	8006556 <_svfiprintf_r+0x1a6>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0c6      	beq.n	80064e0 <_svfiprintf_r+0x130>
 8006552:	9105      	str	r1, [sp, #20]
 8006554:	e7c4      	b.n	80064e0 <_svfiprintf_r+0x130>
 8006556:	4604      	mov	r4, r0
 8006558:	2301      	movs	r3, #1
 800655a:	fb0c 2101 	mla	r1, ip, r1, r2
 800655e:	e7f0      	b.n	8006542 <_svfiprintf_r+0x192>
 8006560:	ab03      	add	r3, sp, #12
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	462a      	mov	r2, r5
 8006566:	4638      	mov	r0, r7
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <_svfiprintf_r+0x1f8>)
 800656a:	a904      	add	r1, sp, #16
 800656c:	f3af 8000 	nop.w
 8006570:	1c42      	adds	r2, r0, #1
 8006572:	4606      	mov	r6, r0
 8006574:	d1d6      	bne.n	8006524 <_svfiprintf_r+0x174>
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	065b      	lsls	r3, r3, #25
 800657a:	f53f af2d 	bmi.w	80063d8 <_svfiprintf_r+0x28>
 800657e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006580:	b01d      	add	sp, #116	; 0x74
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	ab03      	add	r3, sp, #12
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	462a      	mov	r2, r5
 800658c:	4638      	mov	r0, r7
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <_svfiprintf_r+0x1f8>)
 8006590:	a904      	add	r1, sp, #16
 8006592:	f000 f87d 	bl	8006690 <_printf_i>
 8006596:	e7eb      	b.n	8006570 <_svfiprintf_r+0x1c0>
 8006598:	08007152 	.word	0x08007152
 800659c:	08007158 	.word	0x08007158
 80065a0:	0800715c 	.word	0x0800715c
 80065a4:	00000000 	.word	0x00000000
 80065a8:	080062fd 	.word	0x080062fd

080065ac <_printf_common>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	4616      	mov	r6, r2
 80065b2:	4699      	mov	r9, r3
 80065b4:	688a      	ldr	r2, [r1, #8]
 80065b6:	690b      	ldr	r3, [r1, #16]
 80065b8:	4607      	mov	r7, r0
 80065ba:	4293      	cmp	r3, r2
 80065bc:	bfb8      	it	lt
 80065be:	4613      	movlt	r3, r2
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065c6:	460c      	mov	r4, r1
 80065c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065cc:	b10a      	cbz	r2, 80065d2 <_printf_common+0x26>
 80065ce:	3301      	adds	r3, #1
 80065d0:	6033      	str	r3, [r6, #0]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	0699      	lsls	r1, r3, #26
 80065d6:	bf42      	ittt	mi
 80065d8:	6833      	ldrmi	r3, [r6, #0]
 80065da:	3302      	addmi	r3, #2
 80065dc:	6033      	strmi	r3, [r6, #0]
 80065de:	6825      	ldr	r5, [r4, #0]
 80065e0:	f015 0506 	ands.w	r5, r5, #6
 80065e4:	d106      	bne.n	80065f4 <_printf_common+0x48>
 80065e6:	f104 0a19 	add.w	sl, r4, #25
 80065ea:	68e3      	ldr	r3, [r4, #12]
 80065ec:	6832      	ldr	r2, [r6, #0]
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	42ab      	cmp	r3, r5
 80065f2:	dc2b      	bgt.n	800664c <_printf_common+0xa0>
 80065f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065f8:	1e13      	subs	r3, r2, #0
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	bf18      	it	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	0692      	lsls	r2, r2, #26
 8006602:	d430      	bmi.n	8006666 <_printf_common+0xba>
 8006604:	4649      	mov	r1, r9
 8006606:	4638      	mov	r0, r7
 8006608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800660c:	47c0      	blx	r8
 800660e:	3001      	adds	r0, #1
 8006610:	d023      	beq.n	800665a <_printf_common+0xae>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	6922      	ldr	r2, [r4, #16]
 8006616:	f003 0306 	and.w	r3, r3, #6
 800661a:	2b04      	cmp	r3, #4
 800661c:	bf14      	ite	ne
 800661e:	2500      	movne	r5, #0
 8006620:	6833      	ldreq	r3, [r6, #0]
 8006622:	f04f 0600 	mov.w	r6, #0
 8006626:	bf08      	it	eq
 8006628:	68e5      	ldreq	r5, [r4, #12]
 800662a:	f104 041a 	add.w	r4, r4, #26
 800662e:	bf08      	it	eq
 8006630:	1aed      	subeq	r5, r5, r3
 8006632:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006636:	bf08      	it	eq
 8006638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800663c:	4293      	cmp	r3, r2
 800663e:	bfc4      	itt	gt
 8006640:	1a9b      	subgt	r3, r3, r2
 8006642:	18ed      	addgt	r5, r5, r3
 8006644:	42b5      	cmp	r5, r6
 8006646:	d11a      	bne.n	800667e <_printf_common+0xd2>
 8006648:	2000      	movs	r0, #0
 800664a:	e008      	b.n	800665e <_printf_common+0xb2>
 800664c:	2301      	movs	r3, #1
 800664e:	4652      	mov	r2, sl
 8006650:	4649      	mov	r1, r9
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	3001      	adds	r0, #1
 8006658:	d103      	bne.n	8006662 <_printf_common+0xb6>
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	3501      	adds	r5, #1
 8006664:	e7c1      	b.n	80065ea <_printf_common+0x3e>
 8006666:	2030      	movs	r0, #48	; 0x30
 8006668:	18e1      	adds	r1, r4, r3
 800666a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006674:	4422      	add	r2, r4
 8006676:	3302      	adds	r3, #2
 8006678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800667c:	e7c2      	b.n	8006604 <_printf_common+0x58>
 800667e:	2301      	movs	r3, #1
 8006680:	4622      	mov	r2, r4
 8006682:	4649      	mov	r1, r9
 8006684:	4638      	mov	r0, r7
 8006686:	47c0      	blx	r8
 8006688:	3001      	adds	r0, #1
 800668a:	d0e6      	beq.n	800665a <_printf_common+0xae>
 800668c:	3601      	adds	r6, #1
 800668e:	e7d9      	b.n	8006644 <_printf_common+0x98>

08006690 <_printf_i>:
 8006690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	7e0f      	ldrb	r7, [r1, #24]
 8006696:	4691      	mov	r9, r2
 8006698:	2f78      	cmp	r7, #120	; 0x78
 800669a:	4680      	mov	r8, r0
 800669c:	460c      	mov	r4, r1
 800669e:	469a      	mov	sl, r3
 80066a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066a6:	d807      	bhi.n	80066b8 <_printf_i+0x28>
 80066a8:	2f62      	cmp	r7, #98	; 0x62
 80066aa:	d80a      	bhi.n	80066c2 <_printf_i+0x32>
 80066ac:	2f00      	cmp	r7, #0
 80066ae:	f000 80d5 	beq.w	800685c <_printf_i+0x1cc>
 80066b2:	2f58      	cmp	r7, #88	; 0x58
 80066b4:	f000 80c1 	beq.w	800683a <_printf_i+0x1aa>
 80066b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066c0:	e03a      	b.n	8006738 <_printf_i+0xa8>
 80066c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066c6:	2b15      	cmp	r3, #21
 80066c8:	d8f6      	bhi.n	80066b8 <_printf_i+0x28>
 80066ca:	a101      	add	r1, pc, #4	; (adr r1, 80066d0 <_printf_i+0x40>)
 80066cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d0:	08006729 	.word	0x08006729
 80066d4:	0800673d 	.word	0x0800673d
 80066d8:	080066b9 	.word	0x080066b9
 80066dc:	080066b9 	.word	0x080066b9
 80066e0:	080066b9 	.word	0x080066b9
 80066e4:	080066b9 	.word	0x080066b9
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	080066b9 	.word	0x080066b9
 80066f0:	080066b9 	.word	0x080066b9
 80066f4:	080066b9 	.word	0x080066b9
 80066f8:	080066b9 	.word	0x080066b9
 80066fc:	08006843 	.word	0x08006843
 8006700:	08006769 	.word	0x08006769
 8006704:	080067fd 	.word	0x080067fd
 8006708:	080066b9 	.word	0x080066b9
 800670c:	080066b9 	.word	0x080066b9
 8006710:	08006865 	.word	0x08006865
 8006714:	080066b9 	.word	0x080066b9
 8006718:	08006769 	.word	0x08006769
 800671c:	080066b9 	.word	0x080066b9
 8006720:	080066b9 	.word	0x080066b9
 8006724:	08006805 	.word	0x08006805
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	602a      	str	r2, [r5, #0]
 8006730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006738:	2301      	movs	r3, #1
 800673a:	e0a0      	b.n	800687e <_printf_i+0x1ee>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	0607      	lsls	r7, r0, #24
 8006742:	f103 0104 	add.w	r1, r3, #4
 8006746:	6029      	str	r1, [r5, #0]
 8006748:	d501      	bpl.n	800674e <_printf_i+0xbe>
 800674a:	681e      	ldr	r6, [r3, #0]
 800674c:	e003      	b.n	8006756 <_printf_i+0xc6>
 800674e:	0646      	lsls	r6, r0, #25
 8006750:	d5fb      	bpl.n	800674a <_printf_i+0xba>
 8006752:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006756:	2e00      	cmp	r6, #0
 8006758:	da03      	bge.n	8006762 <_printf_i+0xd2>
 800675a:	232d      	movs	r3, #45	; 0x2d
 800675c:	4276      	negs	r6, r6
 800675e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006762:	230a      	movs	r3, #10
 8006764:	4859      	ldr	r0, [pc, #356]	; (80068cc <_printf_i+0x23c>)
 8006766:	e012      	b.n	800678e <_printf_i+0xfe>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	6029      	str	r1, [r5, #0]
 8006770:	0605      	lsls	r5, r0, #24
 8006772:	d501      	bpl.n	8006778 <_printf_i+0xe8>
 8006774:	681e      	ldr	r6, [r3, #0]
 8006776:	e002      	b.n	800677e <_printf_i+0xee>
 8006778:	0641      	lsls	r1, r0, #25
 800677a:	d5fb      	bpl.n	8006774 <_printf_i+0xe4>
 800677c:	881e      	ldrh	r6, [r3, #0]
 800677e:	2f6f      	cmp	r7, #111	; 0x6f
 8006780:	bf0c      	ite	eq
 8006782:	2308      	moveq	r3, #8
 8006784:	230a      	movne	r3, #10
 8006786:	4851      	ldr	r0, [pc, #324]	; (80068cc <_printf_i+0x23c>)
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800678e:	6865      	ldr	r5, [r4, #4]
 8006790:	2d00      	cmp	r5, #0
 8006792:	bfa8      	it	ge
 8006794:	6821      	ldrge	r1, [r4, #0]
 8006796:	60a5      	str	r5, [r4, #8]
 8006798:	bfa4      	itt	ge
 800679a:	f021 0104 	bicge.w	r1, r1, #4
 800679e:	6021      	strge	r1, [r4, #0]
 80067a0:	b90e      	cbnz	r6, 80067a6 <_printf_i+0x116>
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	d04b      	beq.n	800683e <_printf_i+0x1ae>
 80067a6:	4615      	mov	r5, r2
 80067a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80067ac:	fb03 6711 	mls	r7, r3, r1, r6
 80067b0:	5dc7      	ldrb	r7, [r0, r7]
 80067b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067b6:	4637      	mov	r7, r6
 80067b8:	42bb      	cmp	r3, r7
 80067ba:	460e      	mov	r6, r1
 80067bc:	d9f4      	bls.n	80067a8 <_printf_i+0x118>
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d10b      	bne.n	80067da <_printf_i+0x14a>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	07de      	lsls	r6, r3, #31
 80067c6:	d508      	bpl.n	80067da <_printf_i+0x14a>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	6861      	ldr	r1, [r4, #4]
 80067cc:	4299      	cmp	r1, r3
 80067ce:	bfde      	ittt	le
 80067d0:	2330      	movle	r3, #48	; 0x30
 80067d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067da:	1b52      	subs	r2, r2, r5
 80067dc:	6122      	str	r2, [r4, #16]
 80067de:	464b      	mov	r3, r9
 80067e0:	4621      	mov	r1, r4
 80067e2:	4640      	mov	r0, r8
 80067e4:	f8cd a000 	str.w	sl, [sp]
 80067e8:	aa03      	add	r2, sp, #12
 80067ea:	f7ff fedf 	bl	80065ac <_printf_common>
 80067ee:	3001      	adds	r0, #1
 80067f0:	d14a      	bne.n	8006888 <_printf_i+0x1f8>
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	b004      	add	sp, #16
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	2778      	movs	r7, #120	; 0x78
 8006806:	4832      	ldr	r0, [pc, #200]	; (80068d0 <_printf_i+0x240>)
 8006808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	6829      	ldr	r1, [r5, #0]
 8006810:	061f      	lsls	r7, r3, #24
 8006812:	f851 6b04 	ldr.w	r6, [r1], #4
 8006816:	d402      	bmi.n	800681e <_printf_i+0x18e>
 8006818:	065f      	lsls	r7, r3, #25
 800681a:	bf48      	it	mi
 800681c:	b2b6      	uxthmi	r6, r6
 800681e:	07df      	lsls	r7, r3, #31
 8006820:	bf48      	it	mi
 8006822:	f043 0320 	orrmi.w	r3, r3, #32
 8006826:	6029      	str	r1, [r5, #0]
 8006828:	bf48      	it	mi
 800682a:	6023      	strmi	r3, [r4, #0]
 800682c:	b91e      	cbnz	r6, 8006836 <_printf_i+0x1a6>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f023 0320 	bic.w	r3, r3, #32
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	2310      	movs	r3, #16
 8006838:	e7a6      	b.n	8006788 <_printf_i+0xf8>
 800683a:	4824      	ldr	r0, [pc, #144]	; (80068cc <_printf_i+0x23c>)
 800683c:	e7e4      	b.n	8006808 <_printf_i+0x178>
 800683e:	4615      	mov	r5, r2
 8006840:	e7bd      	b.n	80067be <_printf_i+0x12e>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	6826      	ldr	r6, [r4, #0]
 8006846:	1d18      	adds	r0, r3, #4
 8006848:	6961      	ldr	r1, [r4, #20]
 800684a:	6028      	str	r0, [r5, #0]
 800684c:	0635      	lsls	r5, r6, #24
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	d501      	bpl.n	8006856 <_printf_i+0x1c6>
 8006852:	6019      	str	r1, [r3, #0]
 8006854:	e002      	b.n	800685c <_printf_i+0x1cc>
 8006856:	0670      	lsls	r0, r6, #25
 8006858:	d5fb      	bpl.n	8006852 <_printf_i+0x1c2>
 800685a:	8019      	strh	r1, [r3, #0]
 800685c:	2300      	movs	r3, #0
 800685e:	4615      	mov	r5, r2
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	e7bc      	b.n	80067de <_printf_i+0x14e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	2100      	movs	r1, #0
 8006868:	1d1a      	adds	r2, r3, #4
 800686a:	602a      	str	r2, [r5, #0]
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	4628      	mov	r0, r5
 8006872:	f000 f859 	bl	8006928 <memchr>
 8006876:	b108      	cbz	r0, 800687c <_printf_i+0x1ec>
 8006878:	1b40      	subs	r0, r0, r5
 800687a:	6060      	str	r0, [r4, #4]
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	2300      	movs	r3, #0
 8006882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006886:	e7aa      	b.n	80067de <_printf_i+0x14e>
 8006888:	462a      	mov	r2, r5
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	47d0      	blx	sl
 8006892:	3001      	adds	r0, #1
 8006894:	d0ad      	beq.n	80067f2 <_printf_i+0x162>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	079b      	lsls	r3, r3, #30
 800689a:	d413      	bmi.n	80068c4 <_printf_i+0x234>
 800689c:	68e0      	ldr	r0, [r4, #12]
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	4298      	cmp	r0, r3
 80068a2:	bfb8      	it	lt
 80068a4:	4618      	movlt	r0, r3
 80068a6:	e7a6      	b.n	80067f6 <_printf_i+0x166>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4632      	mov	r2, r6
 80068ac:	4649      	mov	r1, r9
 80068ae:	4640      	mov	r0, r8
 80068b0:	47d0      	blx	sl
 80068b2:	3001      	adds	r0, #1
 80068b4:	d09d      	beq.n	80067f2 <_printf_i+0x162>
 80068b6:	3501      	adds	r5, #1
 80068b8:	68e3      	ldr	r3, [r4, #12]
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	1a5b      	subs	r3, r3, r1
 80068be:	42ab      	cmp	r3, r5
 80068c0:	dcf2      	bgt.n	80068a8 <_printf_i+0x218>
 80068c2:	e7eb      	b.n	800689c <_printf_i+0x20c>
 80068c4:	2500      	movs	r5, #0
 80068c6:	f104 0619 	add.w	r6, r4, #25
 80068ca:	e7f5      	b.n	80068b8 <_printf_i+0x228>
 80068cc:	08007163 	.word	0x08007163
 80068d0:	08007174 	.word	0x08007174

080068d4 <memmove>:
 80068d4:	4288      	cmp	r0, r1
 80068d6:	b510      	push	{r4, lr}
 80068d8:	eb01 0402 	add.w	r4, r1, r2
 80068dc:	d902      	bls.n	80068e4 <memmove+0x10>
 80068de:	4284      	cmp	r4, r0
 80068e0:	4623      	mov	r3, r4
 80068e2:	d807      	bhi.n	80068f4 <memmove+0x20>
 80068e4:	1e43      	subs	r3, r0, #1
 80068e6:	42a1      	cmp	r1, r4
 80068e8:	d008      	beq.n	80068fc <memmove+0x28>
 80068ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f2:	e7f8      	b.n	80068e6 <memmove+0x12>
 80068f4:	4601      	mov	r1, r0
 80068f6:	4402      	add	r2, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d100      	bne.n	80068fe <memmove+0x2a>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006906:	e7f7      	b.n	80068f8 <memmove+0x24>

08006908 <_sbrk_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	2300      	movs	r3, #0
 800690c:	4d05      	ldr	r5, [pc, #20]	; (8006924 <_sbrk_r+0x1c>)
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fb fa2a 	bl	8001d6c <_sbrk>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_sbrk_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_sbrk_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200003e0 	.word	0x200003e0

08006928 <memchr>:
 8006928:	4603      	mov	r3, r0
 800692a:	b510      	push	{r4, lr}
 800692c:	b2c9      	uxtb	r1, r1
 800692e:	4402      	add	r2, r0
 8006930:	4293      	cmp	r3, r2
 8006932:	4618      	mov	r0, r3
 8006934:	d101      	bne.n	800693a <memchr+0x12>
 8006936:	2000      	movs	r0, #0
 8006938:	e003      	b.n	8006942 <memchr+0x1a>
 800693a:	7804      	ldrb	r4, [r0, #0]
 800693c:	3301      	adds	r3, #1
 800693e:	428c      	cmp	r4, r1
 8006940:	d1f6      	bne.n	8006930 <memchr+0x8>
 8006942:	bd10      	pop	{r4, pc}

08006944 <_realloc_r>:
 8006944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006948:	4680      	mov	r8, r0
 800694a:	4614      	mov	r4, r2
 800694c:	460e      	mov	r6, r1
 800694e:	b921      	cbnz	r1, 800695a <_realloc_r+0x16>
 8006950:	4611      	mov	r1, r2
 8006952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006956:	f7ff bc45 	b.w	80061e4 <_malloc_r>
 800695a:	b92a      	cbnz	r2, 8006968 <_realloc_r+0x24>
 800695c:	f7ff fbda 	bl	8006114 <_free_r>
 8006960:	4625      	mov	r5, r4
 8006962:	4628      	mov	r0, r5
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006968:	f000 f81b 	bl	80069a2 <_malloc_usable_size_r>
 800696c:	4284      	cmp	r4, r0
 800696e:	4607      	mov	r7, r0
 8006970:	d802      	bhi.n	8006978 <_realloc_r+0x34>
 8006972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006976:	d812      	bhi.n	800699e <_realloc_r+0x5a>
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fc32 	bl	80061e4 <_malloc_r>
 8006980:	4605      	mov	r5, r0
 8006982:	2800      	cmp	r0, #0
 8006984:	d0ed      	beq.n	8006962 <_realloc_r+0x1e>
 8006986:	42bc      	cmp	r4, r7
 8006988:	4622      	mov	r2, r4
 800698a:	4631      	mov	r1, r6
 800698c:	bf28      	it	cs
 800698e:	463a      	movcs	r2, r7
 8006990:	f7ff fbb2 	bl	80060f8 <memcpy>
 8006994:	4631      	mov	r1, r6
 8006996:	4640      	mov	r0, r8
 8006998:	f7ff fbbc 	bl	8006114 <_free_r>
 800699c:	e7e1      	b.n	8006962 <_realloc_r+0x1e>
 800699e:	4635      	mov	r5, r6
 80069a0:	e7df      	b.n	8006962 <_realloc_r+0x1e>

080069a2 <_malloc_usable_size_r>:
 80069a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a6:	1f18      	subs	r0, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfbc      	itt	lt
 80069ac:	580b      	ldrlt	r3, [r1, r0]
 80069ae:	18c0      	addlt	r0, r0, r3
 80069b0:	4770      	bx	lr
	...

080069b4 <_init>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	bf00      	nop
 80069b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ba:	bc08      	pop	{r3}
 80069bc:	469e      	mov	lr, r3
 80069be:	4770      	bx	lr

080069c0 <_fini>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr
